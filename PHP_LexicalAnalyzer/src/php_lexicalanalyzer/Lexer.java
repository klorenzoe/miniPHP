/* The following code was generated by JFlex 1.6.1 */

package php_lexicalanalyzer;
import static php_lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/php_lexicalanalyzer/Rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\61\1\61\1\61\1\64\1\61\1\61\22\0\1\1\1\44"+
    "\1\0\1\45\1\0\1\46\1\47\1\63\1\50\1\51\1\52\1\57"+
    "\1\0\1\56\1\62\1\60\1\2\1\2\1\2\1\2\1\2\1\2"+
    "\1\2\1\2\1\2\1\2\1\45\1\54\1\45\1\45\1\45\1\45"+
    "\1\0\1\40\1\23\1\23\1\23\1\34\1\42\1\23\1\23\1\23"+
    "\1\23\1\23\1\43\1\23\1\23\1\23\1\23\1\23\1\35\1\41"+
    "\1\36\1\37\1\23\1\23\1\23\1\23\1\23\1\45\1\0\1\45"+
    "\1\0\1\53\1\0\1\15\1\31\1\27\1\17\1\5\1\20\1\21"+
    "\1\22\1\12\1\23\1\24\1\25\1\33\1\32\1\13\1\14\1\3"+
    "\1\6\1\16\1\7\1\11\1\30\1\4\1\26\1\10\1\23\1\0"+
    "\1\55\1\0\1\45\6\0\1\64\33\0\1\45\6\0\1\45\3\0"+
    "\1\45\3\0\1\45\40\0\1\23\37\0\1\23\u1f36\0\1\64\1\64"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\27\4\5\1\5\0\15\4"+
    "\1\5\4\4\1\0\3\4\2\0\23\4\1\0\1\6"+
    "\4\0\2\7\1\0\1\7\3\0\1\10\1\0\26\4"+
    "\5\0\2\4\1\0\7\4\1\5\13\4\16\0\1\11"+
    "\1\5\10\4\1\12\10\4\2\0\3\4\1\0\13\4"+
    "\15\0\2\7\4\0\2\7\4\4\1\0\13\4\1\5"+
    "\1\4\1\5\5\4\3\0\1\6\6\0\1\7\1\0"+
    "\1\7\11\4\1\12\1\4\5\0\1\6\10\0\1\5"+
    "\5\4\20\0\2\4\16\0\1\4\47\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\237\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u0601\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\237\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u0562\0\u18d8\0\u190d\0\u1942"+
    "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92"+
    "\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\65\0\u1fad"+
    "\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5"+
    "\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d"+
    "\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5"+
    "\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45"+
    "\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced"+
    "\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\65"+
    "\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008"+
    "\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0"+
    "\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358"+
    "\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u30a7\0\u3496\0\u34cb"+
    "\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673"+
    "\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b"+
    "\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3"+
    "\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b"+
    "\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13"+
    "\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb"+
    "\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063"+
    "\0\u4098\0\u40cd\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b"+
    "\0\u4240\0\u4275\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3"+
    "\0\u43e8\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b"+
    "\0\u4590\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703"+
    "\0\u4738\0\u476d\0\u47a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\5\1\32\3\5\1\33\1\5\1\34\6\2"+
    "\1\35\2\2\1\36\1\37\1\2\1\3\1\2\1\40"+
    "\67\0\1\41\1\4\31\0\1\42\11\0\1\43\3\0"+
    "\1\44\3\0\3\43\1\0\1\45\4\0\42\5\7\0"+
    "\1\5\13\0\20\5\1\46\21\5\7\0\1\5\13\0"+
    "\23\5\1\47\1\50\1\51\1\52\1\5\1\53\1\54"+
    "\10\5\7\0\1\5\13\0\3\5\1\55\36\5\7\0"+
    "\1\5\13\0\4\5\1\56\13\5\1\57\21\5\7\0"+
    "\1\5\13\0\10\5\1\60\31\5\7\0\1\5\13\0"+
    "\14\5\1\61\13\5\1\62\11\5\7\0\1\5\13\0"+
    "\14\5\1\62\1\5\1\63\11\5\1\64\1\65\10\5"+
    "\7\0\1\5\13\0\4\5\1\63\35\5\7\0\1\5"+
    "\13\0\4\5\1\66\2\5\1\67\32\5\7\0\1\5"+
    "\12\0\1\70\4\5\1\71\7\5\1\63\12\5\1\72"+
    "\1\73\11\5\2\0\1\43\1\74\2\0\1\44\1\5"+
    "\1\0\1\75\3\43\6\0\2\5\1\76\2\5\1\77"+
    "\34\5\7\0\1\5\13\0\3\5\1\100\4\5\1\101"+
    "\1\63\30\5\7\0\1\5\13\0\7\5\1\102\1\103"+
    "\1\104\1\5\1\105\26\5\7\0\1\5\13\0\11\5"+
    "\1\106\11\5\1\107\16\5\7\0\1\5\13\0\10\5"+
    "\1\110\31\5\7\0\1\5\13\0\11\5\1\15\30\5"+
    "\7\0\1\5\13\0\11\5\1\111\1\5\1\112\7\5"+
    "\1\113\16\5\7\0\1\5\13\0\13\5\1\15\26\5"+
    "\7\0\1\5\12\0\1\70\4\5\1\114\35\5\2\0"+
    "\1\43\1\74\2\0\1\44\1\5\1\0\1\75\3\43"+
    "\6\0\3\5\1\115\7\5\1\116\26\5\7\0\1\5"+
    "\13\0\33\5\1\117\6\5\7\0\1\5\13\0\36\5"+
    "\1\120\3\5\7\0\1\5\20\0\1\121\5\0\1\122"+
    "\2\0\1\123\10\0\1\122\4\0\1\124\3\0\1\125"+
    "\75\0\1\126\13\0\1\127\12\0\1\130\13\0\1\130"+
    "\24\0\1\131\10\0\1\132\12\0\1\130\13\0\1\130"+
    "\24\0\1\131\7\0\57\133\53\0\1\134\3\0\1\135"+
    "\3\0\3\134\62\0\2\45\7\0\1\132\12\0\1\130"+
    "\13\0\1\130\20\0\1\43\3\0\1\131\10\0\1\136"+
    "\53\0\1\137\10\0\10\5\1\140\31\5\7\0\1\5"+
    "\13\0\14\5\1\141\25\5\7\0\1\5\13\0\5\5"+
    "\1\142\2\5\1\143\31\5\7\0\1\5\13\0\20\5"+
    "\1\144\21\5\7\0\1\5\13\0\13\5\1\145\26\5"+
    "\7\0\1\5\13\0\15\5\1\146\24\5\7\0\1\5"+
    "\13\0\12\5\1\147\27\5\7\0\1\5\13\0\1\5"+
    "\1\150\3\5\1\151\34\5\7\0\1\5\13\0\6\5"+
    "\1\63\1\152\3\5\1\153\26\5\7\0\1\5\13\0"+
    "\4\5\1\154\35\5\7\0\1\5\13\0\3\5\1\155"+
    "\36\5\7\0\1\5\13\0\3\5\1\63\36\5\7\0"+
    "\1\5\13\0\14\5\1\156\25\5\7\0\1\5\13\0"+
    "\5\5\1\157\6\5\1\160\10\5\1\161\14\5\7\0"+
    "\1\5\13\0\12\5\1\162\27\5\7\0\1\5\13\0"+
    "\10\5\1\163\1\164\30\5\7\0\1\5\13\0\27\5"+
    "\1\165\12\5\7\0\1\5\24\0\1\166\1\0\1\167"+
    "\10\0\1\170\17\0\1\134\1\171\2\0\1\135\2\0"+
    "\1\172\3\134\6\0\4\5\1\173\35\5\7\0\1\5"+
    "\13\0\14\5\1\174\25\5\7\0\1\5\13\0\15\5"+
    "\1\63\24\5\7\0\1\5\60\0\1\175\72\0\1\175"+
    "\11\0\10\5\1\176\31\5\7\0\1\5\13\0\13\5"+
    "\1\177\26\5\7\0\1\5\13\0\16\5\1\200\6\5"+
    "\1\201\14\5\7\0\1\5\13\0\3\5\1\202\36\5"+
    "\7\0\1\5\13\0\30\5\1\203\11\5\7\0\1\5"+
    "\13\0\30\5\1\204\11\5\7\0\1\5\13\0\4\5"+
    "\1\205\35\5\7\0\1\5\13\0\23\5\1\206\16\5"+
    "\7\0\1\5\13\0\5\5\1\144\34\5\7\0\1\5"+
    "\13\0\11\5\1\207\30\5\7\0\1\5\13\0\14\5"+
    "\1\143\25\5\7\0\1\5\13\0\30\5\1\210\11\5"+
    "\7\0\1\5\13\0\5\5\1\211\6\5\1\61\6\5"+
    "\1\212\16\5\7\0\1\5\13\0\11\5\1\213\1\5"+
    "\1\214\26\5\7\0\1\5\13\0\3\5\1\215\36\5"+
    "\7\0\1\5\13\0\2\5\1\63\37\5\7\0\1\5"+
    "\13\0\31\5\1\216\10\5\7\0\1\5\13\0\35\5"+
    "\1\217\4\5\7\0\1\5\13\0\41\5\1\220\7\0"+
    "\1\5\17\0\1\221\57\0\1\222\45\0\1\223\5\0"+
    "\1\224\24\0\1\225\104\0\1\226\67\0\1\227\46\0"+
    "\1\230\43\0\1\231\1\127\31\0\1\42\11\0\1\232"+
    "\3\0\1\233\3\0\3\232\1\0\1\45\3\0\1\234"+
    "\44\0\1\235\3\0\1\236\3\0\3\235\6\0\1\132"+
    "\63\0\1\234\1\132\43\0\1\235\3\0\1\236\3\0"+
    "\3\235\5\0\57\133\3\0\1\237\2\0\1\43\64\0"+
    "\1\43\50\0\1\134\14\0\1\136\64\0\23\5\1\61"+
    "\16\5\7\0\1\5\13\0\3\5\1\240\36\5\7\0"+
    "\1\5\13\0\3\5\1\241\36\5\7\0\1\5\13\0"+
    "\5\5\1\202\34\5\7\0\1\5\13\0\11\5\1\63"+
    "\30\5\7\0\1\5\13\0\23\5\1\202\16\5\7\0"+
    "\1\5\13\0\2\5\1\6\5\5\1\242\3\5\1\243"+
    "\1\244\1\245\23\5\7\0\1\5\13\0\5\5\1\246"+
    "\34\5\7\0\1\5\13\0\7\5\1\247\32\5\7\0"+
    "\1\5\13\0\7\5\1\250\32\5\7\0\1\5\13\0"+
    "\3\5\1\251\36\5\7\0\1\5\13\0\10\5\1\252"+
    "\31\5\7\0\1\5\13\0\11\5\1\115\30\5\7\0"+
    "\1\5\13\0\23\5\1\73\16\5\7\0\1\5\13\0"+
    "\3\5\1\143\36\5\7\0\1\5\13\0\3\5\1\253"+
    "\36\5\7\0\1\5\13\0\5\5\1\254\34\5\7\0"+
    "\1\5\13\0\23\5\1\255\16\5\7\0\1\5\13\0"+
    "\23\5\1\256\16\5\7\0\1\5\13\0\26\5\1\257"+
    "\1\5\1\252\11\5\7\0\1\5\13\0\5\5\1\260"+
    "\34\5\7\0\1\5\13\0\23\5\1\261\16\5\7\0"+
    "\1\5\17\0\1\262\110\0\1\263\45\0\1\166\120\0"+
    "\1\262\72\0\1\262\11\0\13\5\1\246\26\5\7\0"+
    "\1\5\13\0\5\5\1\264\34\5\7\0\1\5\13\0"+
    "\5\5\1\211\34\5\7\0\1\5\13\0\5\5\1\261"+
    "\34\5\7\0\1\5\13\0\13\5\1\265\26\5\7\0"+
    "\1\5\13\0\23\5\1\266\16\5\7\0\1\5\13\0"+
    "\42\5\4\0\1\267\2\0\1\5\13\0\25\5\1\270"+
    "\14\5\7\0\1\5\13\0\13\5\1\271\26\5\7\0"+
    "\1\5\13\0\3\5\1\272\36\5\7\0\1\5\13\0"+
    "\14\5\1\273\25\5\7\0\1\5\13\0\27\5\1\274"+
    "\12\5\7\0\1\5\13\0\5\5\1\275\6\5\1\252"+
    "\25\5\7\0\1\5\13\0\25\5\1\276\14\5\7\0"+
    "\1\5\13\0\23\5\1\277\16\5\7\0\1\5\13\0"+
    "\30\5\1\61\11\5\7\0\1\5\13\0\14\5\1\300"+
    "\25\5\7\0\1\5\13\0\13\5\1\301\26\5\7\0"+
    "\1\5\13\0\3\5\1\302\36\5\7\0\1\5\13\0"+
    "\32\5\1\251\7\5\7\0\1\5\13\0\37\5\1\217"+
    "\2\5\7\0\1\5\22\0\1\303\66\0\1\304\1\0"+
    "\1\305\10\0\1\306\20\0\1\307\5\0\1\310\56\0"+
    "\1\311\72\0\1\311\34\0\1\312\76\0\1\313\70\0"+
    "\1\314\36\0\1\315\115\0\1\316\3\0\1\317\3\0"+
    "\3\316\6\0\1\320\12\0\1\321\13\0\1\321\24\0"+
    "\1\322\1\323\7\0\1\320\12\0\1\321\13\0\1\321"+
    "\20\0\1\232\3\0\1\322\1\323\53\0\1\324\3\0"+
    "\1\325\3\0\3\324\6\0\1\326\12\0\1\327\13\0"+
    "\1\327\24\0\1\322\1\323\7\0\1\326\12\0\1\327"+
    "\13\0\1\327\20\0\1\235\3\0\1\322\1\323\7\0"+
    "\10\5\1\242\31\5\7\0\1\5\13\0\30\5\1\330"+
    "\11\5\7\0\1\5\13\0\16\5\1\63\23\5\7\0"+
    "\1\5\13\0\2\5\1\76\37\5\7\0\1\5\13\0"+
    "\3\5\1\331\36\5\7\0\1\5\13\0\11\5\1\104"+
    "\30\5\7\0\1\5\13\0\6\5\1\202\33\5\7\0"+
    "\1\5\13\0\10\5\1\332\31\5\7\0\1\5\13\0"+
    "\4\5\1\333\35\5\7\0\1\5\12\0\1\334\42\5"+
    "\3\0\1\74\3\0\1\5\1\0\1\75\11\0\5\5"+
    "\1\63\34\5\7\0\1\5\13\0\4\5\1\335\35\5"+
    "\7\0\1\5\13\0\3\5\1\336\7\5\1\337\26\5"+
    "\7\0\1\5\13\0\7\5\1\340\32\5\7\0\1\5"+
    "\13\0\3\5\1\341\36\5\7\0\1\5\13\0\13\5"+
    "\1\342\26\5\7\0\1\5\13\0\3\5\1\343\36\5"+
    "\7\0\1\5\13\0\10\5\1\344\31\5\7\0\1\5"+
    "\12\0\1\175\102\0\1\262\47\0\4\5\1\345\35\5"+
    "\7\0\1\5\13\0\7\5\1\346\32\5\7\0\1\5"+
    "\13\0\13\5\1\347\26\5\7\0\1\5\62\0\1\350"+
    "\15\0\5\5\1\351\34\5\7\0\1\5\13\0\23\5"+
    "\1\352\16\5\7\0\1\5\13\0\13\5\1\211\26\5"+
    "\7\0\1\5\13\0\3\5\1\353\36\5\7\0\1\5"+
    "\13\0\13\5\1\354\26\5\7\0\1\5\13\0\10\5"+
    "\1\355\31\5\7\0\1\5\13\0\20\5\1\63\21\5"+
    "\7\0\1\5\13\0\13\5\1\356\26\5\7\0\1\5"+
    "\13\0\14\5\1\63\25\5\7\0\1\5\13\0\22\5"+
    "\1\63\17\5\7\0\1\5\13\0\14\5\1\357\25\5"+
    "\7\0\1\5\16\0\1\122\65\0\1\360\110\0\1\361"+
    "\45\0\1\304\120\0\1\360\72\0\1\360\16\0\1\362"+
    "\5\0\1\363\2\0\1\364\10\0\1\363\4\0\1\365"+
    "\3\0\1\366\1\0\1\367\36\0\1\370\102\0\1\122"+
    "\71\0\1\313\50\0\1\371\40\0\1\232\64\0\1\232"+
    "\50\0\1\316\13\0\1\231\1\320\43\0\1\232\3\0"+
    "\1\233\3\0\3\232\5\0\1\231\44\0\1\232\3\0"+
    "\1\233\3\0\3\232\6\0\1\320\12\0\1\372\13\0"+
    "\1\372\24\0\1\373\10\0\1\374\12\0\1\372\13\0"+
    "\1\372\24\0\1\373\7\0\1\235\64\0\1\235\50\0"+
    "\1\324\13\0\1\41\1\326\43\0\1\43\3\0\1\44"+
    "\3\0\3\43\5\0\1\41\44\0\1\43\3\0\1\44"+
    "\3\0\3\43\6\0\15\5\1\300\24\5\7\0\1\5"+
    "\13\0\25\5\1\201\14\5\7\0\1\5\13\0\4\5"+
    "\1\375\35\5\7\0\1\5\13\0\30\5\1\63\11\5"+
    "\7\0\1\5\24\0\1\166\1\0\1\167\10\0\1\170"+
    "\20\0\1\171\5\0\1\172\11\0\16\5\1\376\23\5"+
    "\7\0\1\5\13\0\13\5\1\377\26\5\7\0\1\5"+
    "\13\0\30\5\1\u0100\11\5\7\0\1\5\13\0\15\5"+
    "\1\375\24\5\7\0\1\5\13\0\31\5\1\u0101\10\5"+
    "\7\0\1\5\13\0\5\5\1\61\34\5\7\0\1\5"+
    "\13\0\25\5\1\u0102\14\5\7\0\1\5\13\0\25\5"+
    "\1\63\14\5\7\0\1\5\13\0\13\5\1\u0103\26\5"+
    "\7\0\1\5\13\0\23\5\1\252\16\5\7\0\1\5"+
    "\13\0\4\5\1\61\35\5\7\0\1\5\13\0\10\5"+
    "\1\u0104\31\5\7\0\1\5\13\0\23\5\1\u0105\16\5"+
    "\7\0\1\5\13\0\42\5\7\0\1\5\1\u0106\12\0"+
    "\23\5\1\63\16\5\7\0\1\5\13\0\30\5\1\u0107"+
    "\11\5\7\0\1\5\13\0\27\5\1\140\12\5\7\0"+
    "\1\5\13\0\12\5\1\376\27\5\7\0\1\5\12\0"+
    "\1\311\102\0\1\360\53\0\1\u0108\57\0\1\334\45\0"+
    "\1\74\5\0\1\75\24\0\1\u0109\104\0\1\u010a\67\0"+
    "\1\u010b\33\0\1\u010c\5\0\1\u010d\2\0\1\u010e\10\0"+
    "\1\u010d\4\0\1\u010f\3\0\1\u0110\27\0\1\u0111\66\0"+
    "\1\u0112\56\0\1\u0113\44\0\1\u0114\3\0\1\u0115\3\0"+
    "\3\u0114\6\0\1\374\63\0\1\u0113\1\374\43\0\1\u0114"+
    "\3\0\1\u0115\3\0\3\u0114\6\0\3\5\1\u0116\36\5"+
    "\7\0\1\5\13\0\13\5\1\u0117\26\5\7\0\1\5"+
    "\13\0\15\5\1\u0118\24\5\7\0\1\5\13\0\25\5"+
    "\1\u0119\14\5\7\0\1\5\13\0\3\5\1\u011a\36\5"+
    "\7\0\1\5\13\0\5\5\1\u011b\34\5\7\0\1\5"+
    "\13\0\25\5\1\252\14\5\7\0\1\5\13\0\11\5"+
    "\1\333\30\5\7\0\1\5\13\0\6\5\1\63\33\5"+
    "\7\0\1\5\13\0\7\5\1\61\32\5\7\0\1\5"+
    "\22\0\1\u011c\100\0\1\u011d\76\0\1\u011e\70\0\1\u011f"+
    "\27\0\1\u0120\57\0\1\u0121\45\0\1\u0122\5\0\1\u0123"+
    "\24\0\1\u0124\104\0\1\u0125\67\0\1\u0126\100\0\1\122"+
    "\63\0\1\u0127\57\0\1\u0128\3\0\1\u0129\3\0\3\u0128"+
    "\6\0\1\u012a\12\0\1\u012b\13\0\1\u012b\24\0\1\322"+
    "\1\323\7\0\1\u012a\12\0\1\u012b\13\0\1\u012b\20\0"+
    "\1\u0114\3\0\1\322\1\323\7\0\42\5\7\0\1\u012c"+
    "\13\0\25\5\1\61\14\5\7\0\1\5\13\0\11\5"+
    "\1\242\30\5\7\0\1\5\13\0\3\5\1\u0118\36\5"+
    "\7\0\1\5\13\0\30\5\1\u012d\11\5\7\0\1\5"+
    "\13\0\3\5\1\73\36\5\7\0\1\5\16\0\1\363"+
    "\75\0\1\u012e\102\0\1\363\71\0\1\u011e\34\0\1\u012f"+
    "\66\0\1\u0130\1\0\1\u0131\10\0\1\u0132\20\0\1\u0133"+
    "\5\0\1\u0134\56\0\1\u0135\72\0\1\u0135\34\0\1\u0136"+
    "\76\0\1\u0137\70\0\1\u0138\50\0\1\u0139\36\0\1\u0114"+
    "\64\0\1\u0114\50\0\1\u0128\13\0\1\u013a\1\u012a\43\0"+
    "\1\323\3\0\1\u013b\3\0\3\323\5\0\1\u013a\44\0"+
    "\1\323\3\0\1\u013b\3\0\3\323\6\0\11\5\1\u013c"+
    "\30\5\7\0\1\5\13\0\5\5\1\300\34\5\7\0"+
    "\1\5\16\0\1\u013d\64\0\1\u010d\65\0\1\u013e\110\0"+
    "\1\u013f\45\0\1\u0130\120\0\1\u013e\72\0\1\u013e\16\0"+
    "\1\u0140\5\0\1\u0141\2\0\1\u0142\10\0\1\u0141\4\0"+
    "\1\u0143\3\0\1\u0144\1\0\1\367\36\0\1\u0145\102\0"+
    "\1\u010d\71\0\1\u0137\36\0\1\u0146\117\0\1\u0147\3\0"+
    "\1\u0148\3\0\3\u0147\6\0\1\374\12\0\1\372\13\0"+
    "\1\372\20\0\1\323\3\0\1\373\10\0\30\5\1\u0117"+
    "\11\5\7\0\1\5\65\0\1\363\11\0\1\u0135\102\0"+
    "\1\u013e\53\0\1\u0149\57\0\1\u014a\45\0\1\u014b\5\0"+
    "\1\u014c\24\0\1\u014d\104\0\1\u014e\67\0\1\u014f\31\0"+
    "\1\u0150\112\0\1\u0151\32\0\1\323\64\0\1\323\50\0"+
    "\1\u0147\23\0\1\u0152\66\0\1\u0153\1\0\1\u0154\10\0"+
    "\1\u0155\20\0\1\u0156\5\0\1\u0157\56\0\1\367\72\0"+
    "\1\367\34\0\1\u0158\76\0\1\u0159\70\0\1\u015a\75\0"+
    "\1\u010d\24\0\1\u015b\55\0\1\u0141\65\0\1\u015c\110\0"+
    "\1\u015d\45\0\1\u0153\120\0\1\u015c\72\0\1\u015c\25\0"+
    "\1\u015e\102\0\1\u0141\71\0\1\u0159\35\0\1\u015f\53\0"+
    "\1\367\102\0\1\u015c\52\0\1\u0160\104\0\1\u0161\113\0"+
    "\1\u0141\15\0\1\u0162\65\0\1\u0163\126\0\1\267\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18391];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\35\1\5\0\22\1\1\0\3\1\2\0"+
    "\23\1\1\0\1\1\4\0\2\1\1\0\1\1\3\0"+
    "\1\1\1\0\26\1\5\0\2\1\1\0\23\1\16\0"+
    "\1\11\22\1\2\0\3\1\1\0\13\1\15\0\2\1"+
    "\4\0\6\1\1\0\13\1\1\11\7\1\3\0\1\1"+
    "\6\0\1\1\1\0\14\1\5\0\1\1\10\0\6\1"+
    "\20\0\2\1\16\0\1\1\47\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public String lexeme ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 11: break;
          case 2: 
            { /*ignore*/
            }
          case 12: break;
          case 3: 
            { lexeme=yytext(); return TYPE_INT;
            }
          case 13: break;
          case 4: 
            { lexeme=yytext(); return IDENTIFIERS;
            }
          case 14: break;
          case 5: 
            { lexeme=yytext(); return RESERVE_WORD;
            }
          case 15: break;
          case 6: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 16: break;
          case 7: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 17: break;
          case 8: 
            { lexeme=yytext(); return TYPE_REAL;
            }
          case 18: break;
          case 9: 
            { lexeme=yytext(); return TYPE_STRING;
            }
          case 19: break;
          case 10: 
            { lexeme=yytext(); return TYPE_BOOL;
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
