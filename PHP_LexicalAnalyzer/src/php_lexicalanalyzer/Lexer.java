/* The following code was generated by JFlex 1.6.1 */

package php_lexicalanalyzer;
import static php_lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/php_lexicalanalyzer/Rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\60\1\60\1\60\1\63\1\60\1\60\22\0\1\1\1\44"+
    "\1\0\1\23\1\0\1\45\1\46\1\62\1\47\1\50\1\51\1\56"+
    "\1\0\1\55\1\61\1\57\1\2\1\2\1\2\1\2\1\2\1\2"+
    "\1\2\1\2\1\2\1\2\1\23\1\53\1\23\1\23\1\23\1\23"+
    "\1\0\1\40\1\23\1\23\1\23\1\34\1\42\1\23\1\23\1\23"+
    "\1\23\1\23\1\43\1\23\1\23\1\23\1\23\1\23\1\35\1\41"+
    "\1\36\1\37\1\23\1\23\1\23\1\23\1\23\1\23\1\0\1\23"+
    "\1\0\1\52\1\0\1\15\1\31\1\27\1\17\1\5\1\20\1\21"+
    "\1\22\1\12\1\23\1\24\1\25\1\33\1\32\1\13\1\14\1\3"+
    "\1\6\1\16\1\7\1\11\1\30\1\4\1\26\1\10\1\23\1\0"+
    "\1\54\1\0\1\23\6\0\1\63\33\0\1\23\6\0\1\23\3\0"+
    "\1\23\3\0\1\23\40\0\1\23\37\0\1\23\u1f36\0\1\63\1\63"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\33\1\22\0\1\4\37\0"+
    "\1\5\4\0\2\6\1\0\1\6\3\0\1\7\46\0"+
    "\1\4\31\0\1\10\1\4\11\0\1\11\46\0\2\6"+
    "\4\0\2\6\21\0\1\4\10\0\1\5\6\0\1\6"+
    "\1\0\1\6\17\0\1\5\10\0\1\4\114\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u05b0\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\64\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0208"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8"+
    "\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588"+
    "\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u0514\0\u182c\0\u1860\0\u1894"+
    "\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\64\0\u1ee0"+
    "\0\u1f14\0\234\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c"+
    "\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c"+
    "\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c"+
    "\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc"+
    "\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c"+
    "\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c"+
    "\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac"+
    "\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c"+
    "\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec"+
    "\0\u2f20\0\u2f54\0\u20b4\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058"+
    "\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8"+
    "\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398"+
    "\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538"+
    "\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8"+
    "\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878"+
    "\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18"+
    "\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8"+
    "\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58"+
    "\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8"+
    "\0\u3f2c\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc\0\u4030\0\u4064\0\u4098"+
    "\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238"+
    "\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4\0\u43d8"+
    "\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc\0\u4510\0\u4544\0\u4578"+
    "\0\u45ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\3\2\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\2\1\31\3\2\1\32\1\2\1\33\5\2"+
    "\1\34\2\2\1\35\1\36\1\2\1\3\1\2\1\37"+
    "\66\0\1\40\1\4\31\0\1\41\10\0\1\42\3\0"+
    "\1\43\3\0\3\42\1\0\1\44\24\0\1\45\66\0"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\1\53\35\0"+
    "\1\54\64\0\1\55\13\0\1\56\53\0\1\57\67\0"+
    "\1\60\13\0\1\61\47\0\1\61\1\0\1\62\11\0"+
    "\1\63\1\64\36\0\1\62\63\0\1\65\2\0\1\66"+
    "\53\0\1\67\4\0\1\70\7\0\1\62\12\0\1\71"+
    "\1\72\12\0\1\42\1\73\2\0\1\43\2\0\1\74"+
    "\3\42\10\0\1\75\2\0\1\76\61\0\1\77\4\0"+
    "\1\100\1\62\61\0\1\101\1\102\1\103\1\0\1\104"+
    "\61\0\1\105\11\0\1\106\50\0\1\107\64\0\1\110"+
    "\63\0\1\111\1\0\1\112\7\0\1\113\53\0\1\110"+
    "\47\0\1\67\4\0\1\114\36\0\1\42\1\73\2\0"+
    "\1\43\2\0\1\74\3\42\11\0\1\115\7\0\1\116"+
    "\103\0\1\117\66\0\1\120\32\0\1\121\5\0\1\122"+
    "\2\0\1\123\10\0\1\122\4\0\1\124\3\0\1\125"+
    "\73\0\1\126\13\0\1\127\12\0\1\130\13\0\1\130"+
    "\23\0\1\131\10\0\1\132\12\0\1\130\13\0\1\130"+
    "\23\0\1\131\7\0\56\133\52\0\1\134\3\0\1\135"+
    "\3\0\3\134\61\0\2\44\7\0\1\132\12\0\1\130"+
    "\13\0\1\130\17\0\1\42\3\0\1\131\10\0\1\136"+
    "\52\0\1\137\20\0\1\140\67\0\1\141\54\0\1\142"+
    "\2\0\1\143\73\0\1\144\56\0\1\145\65\0\1\146"+
    "\60\0\1\147\52\0\1\150\3\0\1\151\64\0\1\62"+
    "\1\152\3\0\1\153\54\0\1\154\62\0\1\155\63\0"+
    "\1\62\74\0\1\156\54\0\1\157\6\0\1\160\10\0"+
    "\1\161\50\0\1\162\61\0\1\163\1\164\101\0\1\165"+
    "\45\0\1\166\1\0\1\167\10\0\1\170\16\0\1\134"+
    "\1\171\2\0\1\135\2\0\1\172\3\134\12\0\1\173"+
    "\73\0\1\174\64\0\1\62\112\0\1\175\71\0\1\175"+
    "\21\0\1\176\66\0\1\177\66\0\1\200\6\0\1\201"+
    "\41\0\1\202\110\0\1\203\63\0\1\204\37\0\1\205"+
    "\102\0\1\206\45\0\1\144\67\0\1\207\66\0\1\143"+
    "\77\0\1\210\40\0\1\211\6\0\1\60\6\0\1\212"+
    "\51\0\1\213\1\0\1\214\53\0\1\215\62\0\1\62"+
    "\112\0\1\216\67\0\1\217\67\0\1\220\26\0\1\221"+
    "\56\0\1\222\44\0\1\223\5\0\1\224\24\0\1\225"+
    "\103\0\1\226\66\0\1\227\45\0\1\230\42\0\1\231"+
    "\1\127\31\0\1\41\10\0\1\232\3\0\1\233\3\0"+
    "\3\232\1\0\1\44\3\0\1\234\43\0\1\235\3\0"+
    "\1\236\3\0\3\235\6\0\1\132\62\0\1\234\1\132"+
    "\42\0\1\235\3\0\1\236\3\0\3\235\5\0\56\133"+
    "\3\0\1\237\2\0\1\42\63\0\1\42\47\0\1\134"+
    "\14\0\1\136\106\0\1\60\43\0\1\240\63\0\1\241"+
    "\65\0\1\202\67\0\1\62\75\0\1\202\42\0\1\242"+
    "\5\0\1\243\3\0\1\244\1\245\1\246\52\0\1\247"+
    "\65\0\1\250\63\0\1\251\57\0\1\252\70\0\1\253"+
    "\64\0\1\115\75\0\1\72\43\0\1\143\63\0\1\254"+
    "\65\0\1\255\101\0\1\256\63\0\1\257\66\0\1\260"+
    "\1\0\1\253\40\0\1\261\101\0\1\262\44\0\1\263"+
    "\107\0\1\264\44\0\1\166\116\0\1\263\71\0\1\263"+
    "\24\0\1\247\55\0\1\265\63\0\1\211\63\0\1\262"+
    "\71\0\1\266\73\0\1\267\105\0\1\270\43\0\1\271"+
    "\51\0\1\272\53\0\1\273\74\0\1\274\76\0\1\275"+
    "\41\0\1\276\6\0\1\253\74\0\1\277\61\0\1\300"+
    "\70\0\1\60\47\0\1\301\62\0\1\302\53\0\1\303"+
    "\112\0\1\252\70\0\1\217\33\0\1\304\65\0\1\305"+
    "\1\0\1\306\10\0\1\307\17\0\1\310\5\0\1\311"+
    "\55\0\1\312\71\0\1\312\34\0\1\313\75\0\1\314"+
    "\67\0\1\315\35\0\1\316\113\0\1\317\3\0\1\320"+
    "\3\0\3\317\6\0\1\321\12\0\1\322\13\0\1\322"+
    "\23\0\1\323\1\324\7\0\1\321\12\0\1\322\13\0"+
    "\1\322\17\0\1\232\3\0\1\323\1\324\52\0\1\325"+
    "\3\0\1\326\3\0\3\325\6\0\1\327\12\0\1\330"+
    "\13\0\1\330\23\0\1\323\1\324\7\0\1\327\12\0"+
    "\1\330\13\0\1\330\17\0\1\235\3\0\1\323\1\324"+
    "\17\0\1\243\103\0\1\331\51\0\1\62\47\0\1\75"+
    "\64\0\1\332\71\0\1\103\60\0\1\202\65\0\1\333"+
    "\57\0\1\334\56\0\1\335\44\0\1\73\5\0\1\74"+
    "\16\0\1\62\62\0\1\336\62\0\1\337\7\0\1\340"+
    "\57\0\1\341\57\0\1\342\73\0\1\343\53\0\1\344"+
    "\70\0\1\345\52\0\1\175\101\0\1\263\52\0\1\346"+
    "\66\0\1\347\67\0\1\350\116\0\1\62\22\0\1\351"+
    "\101\0\1\352\53\0\1\211\53\0\1\353\73\0\1\354"+
    "\60\0\1\355\73\0\1\62\56\0\1\356\64\0\1\62"+
    "\71\0\1\62\55\0\1\357\52\0\1\122\64\0\1\360"+
    "\107\0\1\361\44\0\1\305\116\0\1\360\71\0\1\360"+
    "\16\0\1\362\5\0\1\363\2\0\1\364\10\0\1\363"+
    "\4\0\1\365\3\0\1\366\1\0\1\367\35\0\1\370"+
    "\101\0\1\122\70\0\1\314\47\0\1\371\37\0\1\232"+
    "\63\0\1\232\47\0\1\317\13\0\1\231\1\321\42\0"+
    "\1\232\3\0\1\233\3\0\3\232\5\0\1\231\43\0"+
    "\1\232\3\0\1\233\3\0\3\232\6\0\1\321\12\0"+
    "\1\372\13\0\1\372\23\0\1\373\10\0\1\374\12\0"+
    "\1\372\13\0\1\372\23\0\1\373\7\0\1\235\63\0"+
    "\1\235\47\0\1\325\13\0\1\40\1\327\42\0\1\42"+
    "\3\0\1\43\3\0\3\42\5\0\1\40\43\0\1\42"+
    "\3\0\1\43\3\0\3\42\23\0\1\301\73\0\1\201"+
    "\42\0\1\375\107\0\1\62\44\0\1\166\1\0\1\167"+
    "\10\0\1\170\17\0\1\171\5\0\1\172\27\0\1\376"+
    "\60\0\1\377\100\0\1\u0100\50\0\1\375\77\0\1\u0101"+
    "\37\0\1\60\103\0\1\u0102\63\0\1\62\51\0\1\u0103"+
    "\73\0\1\253\44\0\1\60\67\0\1\u0104\76\0\1\u0105"+
    "\111\0\1\252\35\0\1\62\70\0\1\u0106\62\0\1\140"+
    "\46\0\1\376\50\0\1\312\101\0\1\360\52\0\1\u0107"+
    "\72\0\1\u0108\103\0\1\u0109\66\0\1\u010a\32\0\1\u010b"+
    "\5\0\1\u010c\2\0\1\u010d\10\0\1\u010c\4\0\1\u010e"+
    "\3\0\1\u010f\26\0\1\u0110\65\0\1\u0111\55\0\1\u0112"+
    "\43\0\1\u0113\3\0\1\u0114\3\0\3\u0113\6\0\1\374"+
    "\62\0\1\u0112\1\374\42\0\1\u0113\3\0\1\u0114\3\0"+
    "\3\u0113\11\0\1\u0115\73\0\1\u0116\65\0\1\u0117\73\0"+
    "\1\u0118\41\0\1\u0119\65\0\1\u011a\103\0\1\253\47\0"+
    "\1\334\60\0\1\62\64\0\1\60\63\0\1\u011b\77\0"+
    "\1\u011c\75\0\1\u011d\67\0\1\u011e\26\0\1\u011f\56\0"+
    "\1\u0120\44\0\1\u0121\5\0\1\u0122\24\0\1\u0123\103\0"+
    "\1\u0124\66\0\1\u0125\76\0\1\122\62\0\1\u0126\56\0"+
    "\1\u0127\3\0\1\u0128\3\0\3\u0127\6\0\1\u0129\12\0"+
    "\1\u012a\13\0\1\u012a\23\0\1\323\1\324\7\0\1\u0129"+
    "\12\0\1\u012a\13\0\1\u012a\17\0\1\u0113\3\0\1\323"+
    "\1\324\57\0\1\u012b\40\0\1\60\47\0\1\243\55\0"+
    "\1\u0117\110\0\1\u012c\36\0\1\72\63\0\1\363\74\0"+
    "\1\u012d\101\0\1\363\70\0\1\u011d\33\0\1\u012e\65\0"+
    "\1\u012f\1\0\1\u0130\10\0\1\u0131\17\0\1\u0132\5\0"+
    "\1\u0133\55\0\1\u0134\71\0\1\u0134\34\0\1\u0135\75\0"+
    "\1\u0136\67\0\1\u0137\47\0\1\u0138\35\0\1\u0113\63\0"+
    "\1\u0113\47\0\1\u0127\13\0\1\u0139\1\u0129\42\0\1\324"+
    "\3\0\1\u013a\3\0\3\324\5\0\1\u0139\43\0\1\324"+
    "\3\0\1\u013a\3\0\3\324\17\0\1\u013b\57\0\1\301"+
    "\61\0\1\u013c\63\0\1\u010c\64\0\1\u013d\107\0\1\u013e"+
    "\44\0\1\u012f\116\0\1\u013d\71\0\1\u013d\16\0\1\u013f"+
    "\5\0\1\u0140\2\0\1\u0141\10\0\1\u0140\4\0\1\u0142"+
    "\3\0\1\u0143\1\0\1\367\35\0\1\u0144\101\0\1\u010c"+
    "\70\0\1\u0136\35\0\1\u0145\115\0\1\u0146\3\0\1\u0147"+
    "\3\0\3\u0146\6\0\1\374\12\0\1\372\13\0\1\372"+
    "\17\0\1\324\3\0\1\373\40\0\1\u0116\104\0\1\363"+
    "\11\0\1\u0134\101\0\1\u013d\52\0\1\u0148\56\0\1\u0149"+
    "\44\0\1\u014a\5\0\1\u014b\24\0\1\u014c\103\0\1\u014d"+
    "\66\0\1\u014e\30\0\1\u014f\111\0\1\u0150\31\0\1\324"+
    "\63\0\1\324\47\0\1\u0146\23\0\1\u0151\65\0\1\u0152"+
    "\1\0\1\u0153\10\0\1\u0154\17\0\1\u0155\5\0\1\u0156"+
    "\55\0\1\367\71\0\1\367\34\0\1\u0157\75\0\1\u0158"+
    "\67\0\1\u0159\73\0\1\u010c\24\0\1\u015a\54\0\1\u0140"+
    "\64\0\1\u015b\107\0\1\u015c\44\0\1\u0152\116\0\1\u015b"+
    "\71\0\1\u015b\25\0\1\u015d\101\0\1\u0140\70\0\1\u0158"+
    "\34\0\1\u015e\52\0\1\367\101\0\1\u015b\51\0\1\u015f"+
    "\103\0\1\u0160\111\0\1\u0140\15\0\1\u0161\64\0\1\202"+
    "\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17888];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\34\1\22\0\1\11\37\0\1\1\4\0"+
    "\2\1\1\0\1\1\3\0\1\1\46\0\1\1\31\0"+
    "\1\11\1\1\11\0\1\1\46\0\2\1\4\0\2\1"+
    "\21\0\1\1\10\0\1\1\6\0\1\1\1\0\1\1"+
    "\17\0\1\1\10\0\1\1\114\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public String lexeme ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 10: break;
          case 2: 
            { /*ignore*/
            }
          case 11: break;
          case 3: 
            { lexeme=yytext(); return TYPE_INT;
            }
          case 12: break;
          case 4: 
            { lexeme=yytext(); return RESERVE_WORD;
            }
          case 13: break;
          case 5: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 14: break;
          case 6: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 15: break;
          case 7: 
            { lexeme=yytext(); return TYPE_REAL;
            }
          case 16: break;
          case 8: 
            { lexeme=yytext(); return TYPE_STRING;
            }
          case 17: break;
          case 9: 
            { lexeme=yytext(); return TYPE_BOOL;
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
