/* The following code was generated by JFlex 1.6.1 */

package php_lexicalanalyzer;
import static php_lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/php_lexicalanalyzer/Rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\62\1\62\1\62\1\65\1\62\1\62\22\0\1\1\1\44"+
    "\1\0\1\45\1\60\1\46\1\47\1\64\1\50\1\51\1\52\1\57"+
    "\1\0\1\56\1\63\1\61\1\2\1\2\1\2\1\2\1\2\1\2"+
    "\1\2\1\2\1\2\1\2\1\45\1\54\1\45\1\45\1\45\1\45"+
    "\1\0\1\40\1\23\1\23\1\23\1\34\1\42\1\23\1\23\1\23"+
    "\1\23\1\23\1\43\1\23\1\23\1\23\1\23\1\23\1\35\1\41"+
    "\1\36\1\37\1\23\1\23\1\23\1\23\1\23\1\45\1\0\1\45"+
    "\1\0\1\53\1\0\1\15\1\31\1\27\1\17\1\5\1\20\1\21"+
    "\1\22\1\12\1\23\1\24\1\25\1\33\1\32\1\13\1\14\1\3"+
    "\1\6\1\16\1\7\1\11\1\30\1\4\1\26\1\10\1\23\1\0"+
    "\1\55\1\0\1\45\6\0\1\65\33\0\1\45\6\0\1\45\3\0"+
    "\1\45\3\0\1\45\40\0\1\23\37\0\1\23\u1f36\0\1\65\1\65"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\27\4\6\1\5\0\15\4"+
    "\1\5\32\4\6\0\1\6\2\0\1\6\1\7\3\0"+
    "\1\10\1\0\37\4\1\5\13\4\4\0\1\11\4\0"+
    "\1\6\6\0\1\12\1\5\10\4\1\13\13\4\1\0"+
    "\13\4\12\0\1\6\5\0\1\6\7\0\4\4\1\0"+
    "\13\4\1\5\1\4\1\5\5\4\1\11\12\0\3\6"+
    "\2\0\11\4\1\13\1\4\12\0\1\6\3\0\1\5"+
    "\5\4\11\0\1\11\5\0\2\4\10\0\1\11\4\0"+
    "\1\4\1\11\14\0\1\11\53\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u061e\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\242\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02"+
    "\0\u1f38\0\66\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c"+
    "\0\u2ad2\0\u2b08\0\u057c\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16"+
    "\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\u2e68\0\66\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450"+
    "\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600"+
    "\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0"+
    "\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960"+
    "\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0"+
    "\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70"+
    "\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020"+
    "\0\u4056\0\u355e\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a"+
    "\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a"+
    "\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa"+
    "\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa"+
    "\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a"+
    "\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e\0\u49d4\0\u4a0a"+
    "\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84\0\u4bba"+
    "\0\u4bf0\0\u4c26";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\5\1\32\3\5\1\33\1\5\1\34\6\2"+
    "\1\35\2\2\1\36\1\37\1\40\1\2\1\3\1\2"+
    "\1\41\70\0\1\42\1\4\31\0\1\43\11\0\1\44"+
    "\3\0\1\45\3\0\2\44\1\0\1\44\1\0\1\46"+
    "\4\0\42\5\7\0\1\5\14\0\20\5\1\47\21\5"+
    "\7\0\1\5\14\0\23\5\1\50\1\51\1\52\1\53"+
    "\1\5\1\54\1\55\10\5\7\0\1\5\14\0\3\5"+
    "\1\56\36\5\7\0\1\5\14\0\4\5\1\57\13\5"+
    "\1\60\21\5\7\0\1\5\14\0\10\5\1\61\31\5"+
    "\7\0\1\5\14\0\14\5\1\62\13\5\1\63\11\5"+
    "\7\0\1\5\14\0\14\5\1\63\1\5\1\64\11\5"+
    "\1\65\1\66\10\5\7\0\1\5\14\0\4\5\1\64"+
    "\35\5\7\0\1\5\14\0\4\5\1\67\2\5\1\70"+
    "\32\5\7\0\1\5\14\0\4\5\1\71\7\5\1\64"+
    "\12\5\1\72\1\73\11\5\7\0\1\5\14\0\2\5"+
    "\1\74\2\5\1\75\34\5\7\0\1\5\14\0\3\5"+
    "\1\76\4\5\1\77\1\64\30\5\7\0\1\5\14\0"+
    "\7\5\1\100\1\101\1\102\1\5\1\103\26\5\7\0"+
    "\1\5\14\0\11\5\1\104\11\5\1\105\16\5\7\0"+
    "\1\5\14\0\10\5\1\106\31\5\7\0\1\5\14\0"+
    "\11\5\1\15\30\5\7\0\1\5\14\0\11\5\1\107"+
    "\1\5\1\110\7\5\1\111\16\5\7\0\1\5\14\0"+
    "\13\5\1\15\26\5\7\0\1\5\14\0\4\5\1\112"+
    "\35\5\7\0\1\5\14\0\3\5\1\113\7\5\1\114"+
    "\26\5\7\0\1\5\14\0\33\5\1\115\6\5\7\0"+
    "\1\5\14\0\36\5\1\116\3\5\7\0\1\5\21\0"+
    "\1\117\10\0\1\120\15\0\1\121\3\0\1\122\15\0"+
    "\1\123\60\0\1\124\14\0\1\125\53\0\1\126\1\0"+
    "\1\127\7\0\1\130\53\0\1\126\1\0\1\127\10\0"+
    "\41\131\23\0\57\132\54\0\1\133\3\0\1\134\3\0"+
    "\2\133\1\0\1\133\62\0\2\46\10\0\1\130\47\0"+
    "\1\44\3\0\1\126\1\0\1\127\7\0\1\135\53\0"+
    "\1\136\11\0\10\5\1\137\31\5\7\0\1\5\14\0"+
    "\14\5\1\140\25\5\7\0\1\5\14\0\5\5\1\141"+
    "\2\5\1\142\31\5\7\0\1\5\14\0\20\5\1\143"+
    "\21\5\7\0\1\5\14\0\13\5\1\144\26\5\7\0"+
    "\1\5\14\0\15\5\1\145\24\5\7\0\1\5\14\0"+
    "\12\5\1\146\27\5\7\0\1\5\14\0\1\5\1\147"+
    "\3\5\1\150\34\5\7\0\1\5\14\0\6\5\1\64"+
    "\1\151\3\5\1\152\26\5\7\0\1\5\14\0\4\5"+
    "\1\153\35\5\7\0\1\5\14\0\3\5\1\154\36\5"+
    "\7\0\1\5\14\0\3\5\1\64\36\5\7\0\1\5"+
    "\14\0\14\5\1\155\25\5\7\0\1\5\14\0\5\5"+
    "\1\156\6\5\1\157\10\5\1\160\14\5\7\0\1\5"+
    "\14\0\12\5\1\161\27\5\7\0\1\5\14\0\10\5"+
    "\1\162\1\163\30\5\7\0\1\5\14\0\27\5\1\164"+
    "\12\5\7\0\1\5\14\0\4\5\1\165\35\5\7\0"+
    "\1\5\14\0\14\5\1\166\25\5\7\0\1\5\14\0"+
    "\15\5\1\64\24\5\7\0\1\5\14\0\10\5\1\167"+
    "\31\5\7\0\1\5\14\0\13\5\1\170\26\5\7\0"+
    "\1\5\14\0\16\5\1\171\6\5\1\172\14\5\7\0"+
    "\1\5\14\0\3\5\1\173\36\5\7\0\1\5\14\0"+
    "\30\5\1\174\11\5\7\0\1\5\14\0\30\5\1\175"+
    "\11\5\7\0\1\5\14\0\4\5\1\176\35\5\7\0"+
    "\1\5\14\0\23\5\1\177\16\5\7\0\1\5\14\0"+
    "\5\5\1\143\34\5\7\0\1\5\14\0\11\5\1\200"+
    "\30\5\7\0\1\5\14\0\14\5\1\142\25\5\7\0"+
    "\1\5\14\0\30\5\1\201\11\5\7\0\1\5\14\0"+
    "\5\5\1\202\6\5\1\62\6\5\1\203\16\5\7\0"+
    "\1\5\14\0\11\5\1\204\1\5\1\205\26\5\7\0"+
    "\1\5\14\0\3\5\1\206\36\5\7\0\1\5\14\0"+
    "\2\5\1\64\37\5\7\0\1\5\14\0\31\5\1\207"+
    "\10\5\7\0\1\5\14\0\35\5\1\210\4\5\7\0"+
    "\1\5\14\0\41\5\1\211\7\0\1\5\20\0\1\212"+
    "\74\0\1\213\105\0\1\214\70\0\1\215\30\0\41\216"+
    "\44\0\1\217\44\0\1\220\1\125\31\0\1\43\11\0"+
    "\1\221\3\0\1\222\3\0\2\221\1\0\1\221\1\0"+
    "\1\46\4\0\1\130\66\0\41\223\23\0\1\224\1\130"+
    "\43\0\1\225\3\0\1\226\3\0\2\225\1\0\1\225"+
    "\5\0\1\227\42\131\2\0\1\44\1\230\2\0\1\45"+
    "\1\131\1\0\1\231\2\44\1\0\1\44\5\0\57\132"+
    "\4\0\1\232\2\0\1\44\65\0\1\44\50\0\1\133"+
    "\15\0\1\135\65\0\23\5\1\62\16\5\7\0\1\5"+
    "\14\0\3\5\1\233\36\5\7\0\1\5\14\0\3\5"+
    "\1\234\36\5\7\0\1\5\14\0\5\5\1\173\34\5"+
    "\7\0\1\5\14\0\11\5\1\64\30\5\7\0\1\5"+
    "\14\0\23\5\1\173\16\5\7\0\1\5\14\0\2\5"+
    "\1\6\5\5\1\235\3\5\1\236\1\237\1\240\23\5"+
    "\7\0\1\5\14\0\5\5\1\241\34\5\7\0\1\5"+
    "\14\0\7\5\1\242\32\5\7\0\1\5\14\0\7\5"+
    "\1\243\32\5\7\0\1\5\14\0\3\5\1\244\36\5"+
    "\7\0\1\5\14\0\10\5\1\245\31\5\7\0\1\5"+
    "\14\0\11\5\1\113\30\5\7\0\1\5\14\0\23\5"+
    "\1\73\16\5\7\0\1\5\14\0\3\5\1\142\36\5"+
    "\7\0\1\5\14\0\3\5\1\246\36\5\7\0\1\5"+
    "\14\0\5\5\1\247\34\5\7\0\1\5\14\0\23\5"+
    "\1\250\16\5\7\0\1\5\14\0\23\5\1\251\16\5"+
    "\7\0\1\5\14\0\26\5\1\252\1\5\1\245\11\5"+
    "\7\0\1\5\14\0\5\5\1\253\34\5\7\0\1\5"+
    "\14\0\23\5\1\254\16\5\7\0\1\5\14\0\13\5"+
    "\1\241\26\5\7\0\1\5\14\0\5\5\1\255\34\5"+
    "\7\0\1\5\14\0\5\5\1\202\34\5\7\0\1\5"+
    "\14\0\5\5\1\254\34\5\7\0\1\5\14\0\13\5"+
    "\1\256\26\5\7\0\1\5\14\0\23\5\1\257\16\5"+
    "\7\0\1\5\14\0\42\5\4\0\1\260\2\0\1\5"+
    "\14\0\25\5\1\261\14\5\7\0\1\5\14\0\13\5"+
    "\1\262\26\5\7\0\1\5\14\0\3\5\1\263\36\5"+
    "\7\0\1\5\14\0\14\5\1\264\25\5\7\0\1\5"+
    "\14\0\27\5\1\265\12\5\7\0\1\5\14\0\5\5"+
    "\1\266\6\5\1\245\25\5\7\0\1\5\14\0\25\5"+
    "\1\267\14\5\7\0\1\5\14\0\23\5\1\270\16\5"+
    "\7\0\1\5\14\0\30\5\1\62\11\5\7\0\1\5"+
    "\14\0\14\5\1\271\25\5\7\0\1\5\14\0\13\5"+
    "\1\272\26\5\7\0\1\5\14\0\3\5\1\273\36\5"+
    "\7\0\1\5\14\0\32\5\1\244\7\5\7\0\1\5"+
    "\14\0\37\5\1\210\2\5\7\0\1\5\23\0\1\274"+
    "\101\0\1\275\77\0\1\276\71\0\1\277\23\0\1\300"+
    "\42\216\3\0\1\301\3\0\1\216\1\0\1\302\25\0"+
    "\1\303\116\0\1\304\3\0\1\305\3\0\2\304\1\0"+
    "\1\304\6\0\1\306\53\0\1\307\1\310\1\311\7\0"+
    "\1\306\47\0\1\221\3\0\1\307\1\310\1\311\6\0"+
    "\1\224\42\223\2\0\1\225\3\0\1\226\1\223\2\0"+
    "\2\225\1\0\1\225\52\0\1\312\3\0\1\313\3\0"+
    "\2\312\1\0\1\312\6\0\1\314\53\0\1\307\1\310"+
    "\1\315\7\0\1\314\47\0\1\225\3\0\1\307\1\310"+
    "\1\315\20\0\1\316\1\0\1\317\10\0\1\320\17\0"+
    "\1\133\1\321\2\0\1\134\2\0\1\322\2\133\1\0"+
    "\1\133\53\0\1\323\73\0\1\323\12\0\10\5\1\235"+
    "\31\5\7\0\1\5\14\0\30\5\1\324\11\5\7\0"+
    "\1\5\14\0\16\5\1\64\23\5\7\0\1\5\14\0"+
    "\2\5\1\74\37\5\7\0\1\5\14\0\3\5\1\325"+
    "\36\5\7\0\1\5\14\0\11\5\1\102\30\5\7\0"+
    "\1\5\14\0\6\5\1\173\33\5\7\0\1\5\14\0"+
    "\10\5\1\326\31\5\7\0\1\5\14\0\4\5\1\327"+
    "\35\5\7\0\1\5\13\0\1\330\42\5\3\0\1\230"+
    "\3\0\1\5\1\0\1\231\12\0\5\5\1\64\34\5"+
    "\7\0\1\5\14\0\4\5\1\331\35\5\7\0\1\5"+
    "\14\0\3\5\1\332\7\5\1\333\26\5\7\0\1\5"+
    "\14\0\7\5\1\334\32\5\7\0\1\5\14\0\3\5"+
    "\1\335\36\5\7\0\1\5\14\0\13\5\1\336\26\5"+
    "\7\0\1\5\14\0\3\5\1\337\36\5\7\0\1\5"+
    "\14\0\10\5\1\340\31\5\7\0\1\5\14\0\4\5"+
    "\1\341\35\5\7\0\1\5\14\0\7\5\1\342\32\5"+
    "\7\0\1\5\14\0\13\5\1\343\26\5\7\0\1\5"+
    "\63\0\1\344\16\0\5\5\1\345\34\5\7\0\1\5"+
    "\14\0\23\5\1\346\16\5\7\0\1\5\14\0\13\5"+
    "\1\202\26\5\7\0\1\5\14\0\3\5\1\347\36\5"+
    "\7\0\1\5\14\0\13\5\1\350\26\5\7\0\1\5"+
    "\14\0\10\5\1\351\31\5\7\0\1\5\14\0\20\5"+
    "\1\64\21\5\7\0\1\5\14\0\13\5\1\352\26\5"+
    "\7\0\1\5\14\0\14\5\1\64\25\5\7\0\1\5"+
    "\14\0\22\5\1\64\17\5\7\0\1\5\14\0\14\5"+
    "\1\353\25\5\7\0\1\5\17\0\1\354\76\0\1\355"+
    "\103\0\1\354\72\0\1\276\37\0\1\356\1\0\1\357"+
    "\10\0\1\360\20\0\1\361\5\0\1\362\57\0\1\363"+
    "\73\0\1\363\35\0\1\364\41\0\1\221\65\0\1\221"+
    "\50\0\1\304\14\0\1\220\1\306\43\0\1\221\3\0"+
    "\1\222\3\0\2\221\1\0\1\221\6\0\1\306\53\0"+
    "\1\365\1\0\1\366\7\0\1\367\53\0\1\365\1\0"+
    "\1\366\10\0\41\370\23\0\1\225\65\0\1\225\50\0"+
    "\1\312\14\0\1\42\1\314\43\0\1\44\3\0\1\45"+
    "\3\0\2\44\1\0\1\44\7\0\41\371\30\0\1\372"+
    "\111\0\1\373\46\0\1\316\121\0\1\372\73\0\1\372"+
    "\12\0\15\5\1\271\24\5\7\0\1\5\14\0\25\5"+
    "\1\172\14\5\7\0\1\5\14\0\4\5\1\374\35\5"+
    "\7\0\1\5\14\0\30\5\1\64\11\5\7\0\1\5"+
    "\25\0\1\316\1\0\1\317\10\0\1\320\20\0\1\321"+
    "\5\0\1\322\12\0\16\5\1\375\23\5\7\0\1\5"+
    "\14\0\13\5\1\376\26\5\7\0\1\5\14\0\30\5"+
    "\1\377\11\5\7\0\1\5\14\0\15\5\1\374\24\5"+
    "\7\0\1\5\14\0\31\5\1\u0100\10\5\7\0\1\5"+
    "\14\0\5\5\1\62\34\5\7\0\1\5\14\0\25\5"+
    "\1\u0101\14\5\7\0\1\5\14\0\25\5\1\64\14\5"+
    "\7\0\1\5\14\0\13\5\1\u0102\26\5\7\0\1\5"+
    "\14\0\23\5\1\245\16\5\7\0\1\5\14\0\4\5"+
    "\1\62\35\5\7\0\1\5\14\0\10\5\1\u0103\31\5"+
    "\7\0\1\5\14\0\23\5\1\u0104\16\5\7\0\1\5"+
    "\14\0\42\5\7\0\1\5\1\u0105\13\0\23\5\1\64"+
    "\16\5\7\0\1\5\14\0\30\5\1\u0106\11\5\7\0"+
    "\1\5\14\0\27\5\1\137\12\5\7\0\1\5\14\0"+
    "\12\5\1\375\27\5\7\0\1\5\13\0\1\300\45\0"+
    "\1\301\5\0\1\302\15\0\1\u0107\66\0\1\u0108\111\0"+
    "\1\u0109\46\0\1\356\121\0\1\u0108\73\0\1\u0108\17\0"+
    "\1\u010a\10\0\1\u010b\15\0\1\u010c\3\0\1\u010d\1\0"+
    "\1\u010e\13\0\1\u010f\14\0\1\u0110\60\0\1\367\66\0"+
    "\41\u0111\23\0\1\u0112\1\367\43\0\1\u0113\3\0\1\u0114"+
    "\3\0\2\u0113\1\0\1\u0113\5\0\1\220\42\370\2\0"+
    "\1\221\3\0\1\222\1\370\2\0\2\221\1\0\1\221"+
    "\5\0\1\42\42\371\2\0\1\44\3\0\1\45\1\371"+
    "\2\0\2\44\1\0\1\44\5\0\1\323\103\0\1\372"+
    "\50\0\3\5\1\u0115\36\5\7\0\1\5\14\0\13\5"+
    "\1\u0116\26\5\7\0\1\5\14\0\15\5\1\u0117\24\5"+
    "\7\0\1\5\14\0\25\5\1\u0118\14\5\7\0\1\5"+
    "\14\0\3\5\1\u0119\36\5\7\0\1\5\14\0\5\5"+
    "\1\u011a\34\5\7\0\1\5\14\0\25\5\1\245\14\5"+
    "\7\0\1\5\14\0\11\5\1\327\30\5\7\0\1\5"+
    "\14\0\6\5\1\64\33\5\7\0\1\5\13\0\1\330"+
    "\45\0\1\230\5\0\1\231\12\0\7\5\1\62\32\5"+
    "\7\0\1\5\66\0\1\354\12\0\1\363\103\0\1\u0108"+
    "\54\0\1\u011b\74\0\1\u011c\105\0\1\u011d\70\0\1\u011e"+
    "\34\0\1\u011f\10\0\1\u0120\15\0\1\u0121\3\0\1\u0122"+
    "\15\0\1\u0123\10\0\41\u0124\75\0\1\u0125\13\0\1\u0112"+
    "\42\u0111\2\0\1\u0113\3\0\1\u0114\1\u0111\2\0\2\u0113"+
    "\1\0\1\u0113\52\0\1\u0126\3\0\1\u0127\3\0\2\u0126"+
    "\1\0\1\u0126\6\0\1\u0128\53\0\1\307\1\310\1\u0129"+
    "\7\0\1\u0128\47\0\1\u0113\3\0\1\307\1\310\1\u0129"+
    "\7\0\42\5\7\0\1\u012a\14\0\25\5\1\62\14\5"+
    "\7\0\1\5\14\0\11\5\1\235\30\5\7\0\1\5"+
    "\14\0\3\5\1\u0117\36\5\7\0\1\5\14\0\30\5"+
    "\1\u012b\11\5\7\0\1\5\14\0\3\5\1\73\36\5"+
    "\7\0\1\5\23\0\1\u012c\101\0\1\u012d\77\0\1\u012e"+
    "\71\0\1\u012f\30\0\1\u0130\74\0\1\u0131\105\0\1\u0132"+
    "\70\0\1\u0133\30\0\41\u0134\23\0\1\330\42\u0124\3\0"+
    "\1\230\3\0\1\u0124\1\0\1\231\37\0\1\u0135\37\0"+
    "\1\u0113\65\0\1\u0113\50\0\1\u0126\14\0\1\u0136\1\u0128"+
    "\43\0\1\310\3\0\1\u0137\3\0\2\310\1\0\1\310"+
    "\7\0\41\u0138\24\0\11\5\1\u0139\30\5\7\0\1\5"+
    "\14\0\5\5\1\271\34\5\7\0\1\5\17\0\1\u013a"+
    "\76\0\1\u013b\103\0\1\u013a\72\0\1\u012e\35\0\1\u013c"+
    "\101\0\1\u013d\77\0\1\u013e\71\0\1\u013f\23\0\1\u0140"+
    "\42\u0134\3\0\1\u0141\3\0\1\u0134\1\0\1\u0142\23\0"+
    "\1\u0143\120\0\1\u0144\3\0\1\u0145\3\0\2\u0144\1\0"+
    "\1\u0144\6\0\1\367\47\0\1\310\3\0\1\365\1\0"+
    "\1\366\6\0\1\u0136\42\u0138\2\0\1\310\3\0\1\u0137"+
    "\1\u0138\2\0\2\310\1\0\1\310\6\0\30\5\1\u0116"+
    "\11\5\7\0\1\5\17\0\1\u0146\65\0\1\u0147\76\0"+
    "\1\u0148\103\0\1\u0147\72\0\1\u013e\37\0\1\u0149\1\0"+
    "\1\u014a\10\0\1\u014b\20\0\1\u014c\5\0\1\u014d\57\0"+
    "\1\u014e\73\0\1\u014e\43\0\1\u014f\33\0\1\310\65\0"+
    "\1\310\50\0\1\u0144\67\0\1\u013a\12\0\1\u0140\45\0"+
    "\1\u0141\5\0\1\u0142\15\0\1\u0150\66\0\1\u0151\111\0"+
    "\1\u0152\46\0\1\u0149\121\0\1\u0151\73\0\1\u0151\17\0"+
    "\1\u0153\10\0\1\u0154\15\0\1\u0155\3\0\1\u0156\1\0"+
    "\1\u010e\13\0\1\u0157\21\0\1\u0158\125\0\1\u0147\12\0"+
    "\1\u014e\103\0\1\u0151\54\0\1\u0159\74\0\1\u015a\105\0"+
    "\1\u015b\70\0\1\u015c\30\0\41\u015d\34\0\1\u015e\64\0"+
    "\1\u015f\101\0\1\u0160\77\0\1\u0161\71\0\1\u0162\23\0"+
    "\1\u0163\42\u015d\3\0\1\u0164\3\0\1\u015d\1\0\1\u0165"+
    "\35\0\1\u0166\45\0\1\u0167\76\0\1\u0168\103\0\1\u0167"+
    "\72\0\1\u0161\37\0\1\u0169\1\0\1\u016a\10\0\1\u016b"+
    "\20\0\1\u016c\5\0\1\u016d\57\0\1\u010e\73\0\1\u010e"+
    "\15\0\1\u016e\61\0\1\u0163\45\0\1\u0164\5\0\1\u0165"+
    "\15\0\1\u016f\66\0\1\u0170\111\0\1\u0171\46\0\1\u0169"+
    "\121\0\1\u0170\73\0\1\u0170\16\0\1\u0172\133\0\1\u0167"+
    "\12\0\1\u010e\103\0\1\u0170\116\0\1\260\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19548];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\36\1\5\0\50\1\6\0\1\1\2\0"+
    "\2\1\3\0\1\1\1\0\53\1\4\0\1\1\4\0"+
    "\1\1\6\0\1\11\25\1\1\0\13\1\12\0\1\1"+
    "\5\0\1\1\7\0\4\1\1\0\13\1\1\11\10\1"+
    "\12\0\3\1\2\0\13\1\12\0\1\1\3\0\6\1"+
    "\11\0\1\1\5\0\2\1\10\0\1\1\4\0\2\1"+
    "\14\0\1\1\53\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public String lexeme ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 12: break;
          case 2: 
            { /*ignore*/
            }
          case 13: break;
          case 3: 
            { lexeme=yytext(); return TYPE_INT;
            }
          case 14: break;
          case 4: 
            { lexeme=yytext(); return IDENTIFIERS;
            }
          case 15: break;
          case 5: 
            { lexeme=yytext(); return RESERVE_WORD;
            }
          case 16: break;
          case 6: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 17: break;
          case 7: 
            { lexeme=yytext(); return VARIABLES;
            }
          case 18: break;
          case 8: 
            { lexeme=yytext(); return TYPE_REAL;
            }
          case 19: break;
          case 9: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 20: break;
          case 10: 
            { lexeme=yytext(); return TYPE_STRING;
            }
          case 21: break;
          case 11: 
            { lexeme=yytext(); return TYPE_BOOL;
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
