/* The following code was generated by JFlex 1.6.1 */

package php_lexicalanalyzer;
import static php_lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/php_lexicalanalyzer/Rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\7\1\7\1\7\1\43\1\7\1\7\22\0\1\1\7\0"+
    "\1\13\1\14\1\5\1\4\1\0\1\3\1\0\1\6\1\2\1\2"+
    "\1\2\1\2\1\2\1\2\1\2\1\2\1\2\1\2\45\0\1\35"+
    "\1\0\1\30\1\36\1\16\1\10\1\12\1\22\1\41\1\17\1\11"+
    "\1\0\1\37\1\20\1\23\1\27\1\15\1\24\1\42\1\31\1\21"+
    "\1\25\1\40\1\33\1\32\1\34\1\26\13\0\1\43\u1fa2\0\1\43"+
    "\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\30\1\4\0\1\3\1\0\1\3"+
    "\2\0\1\4\75\0\1\4\27\0\1\4\45\0\1\4"+
    "\25\0\1\4\17\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\44\0\110\0\154\0\220\0\264\0\330"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8"+
    "\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318"+
    "\0\u033c\0\u0360\0\u0384\0\u03a8\0\110\0\220\0\u03cc\0\u03f0"+
    "\0\u0414\0\u0414\0\u0438\0\u045c\0\44\0\u0480\0\u04a4\0\u04c8"+
    "\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8"+
    "\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828"+
    "\0\u084c\0\u0870\0\u0894\0\u0120\0\u08b8\0\u08dc\0\u0900\0\u0924"+
    "\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\u0a44"+
    "\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64"+
    "\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84"+
    "\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4"+
    "\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4"+
    "\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4"+
    "\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104"+
    "\0\u02ac\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200"+
    "\0\u1224\0\u1248\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320"+
    "\0\u1344\0\u1368\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440"+
    "\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560"+
    "\0\u1584\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680"+
    "\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0"+
    "\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0"+
    "\0\u18e4\0\u1908\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0"+
    "\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\2\1\3\1\7"+
    "\1\10\1\11\2\2\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\2\1\32\1\33"+
    "\1\2\46\0\1\34\1\35\2\36\1\37\1\36\37\0"+
    "\1\40\1\41\42\0\1\42\1\41\51\0\1\43\1\44"+
    "\2\0\1\45\47\0\1\46\1\45\1\47\3\0\1\50"+
    "\32\0\1\51\1\0\1\52\2\0\1\53\3\0\1\54"+
    "\3\0\1\55\1\56\40\0\1\45\27\0\1\57\2\0"+
    "\1\60\7\0\1\61\24\0\1\62\57\0\1\63\4\0"+
    "\1\64\22\0\1\65\3\0\1\66\22\0\1\67\34\0"+
    "\1\70\6\0\1\71\22\0\1\72\11\0\1\73\23\0"+
    "\1\74\44\0\1\75\15\0\1\76\34\0\1\45\5\0"+
    "\1\77\1\0\1\100\4\0\1\101\17\0\1\102\50\0"+
    "\1\103\54\0\1\104\30\0\1\104\63\0\1\105\37\0"+
    "\1\106\33\0\1\107\5\0\1\46\31\0\1\110\2\0"+
    "\1\111\26\0\2\112\1\113\1\112\37\0\1\42\1\41"+
    "\1\0\1\36\37\0\1\34\1\40\2\36\1\37\1\36"+
    "\37\0\1\42\53\0\1\114\47\0\1\115\3\0\1\116"+
    "\42\0\1\117\46\0\1\120\35\0\1\121\2\0\1\122"+
    "\3\0\1\123\35\0\1\124\45\0\1\125\46\0\1\126"+
    "\27\0\1\127\63\0\1\130\24\0\1\131\13\0\1\132"+
    "\45\0\1\133\31\0\1\134\12\0\1\135\33\0\1\136"+
    "\1\107\3\0\1\137\37\0\1\131\52\0\1\140\24\0"+
    "\1\141\61\0\1\142\45\0\1\143\41\0\1\144\25\0"+
    "\1\145\3\0\1\146\64\0\1\147\36\0\1\150\40\0"+
    "\1\45\1\0\1\151\25\0\1\152\63\0\1\45\34\0"+
    "\1\153\30\0\1\45\64\0\1\154\33\0\1\155\47\0"+
    "\1\156\14\0\1\157\12\0\1\160\51\0\1\161\36\0"+
    "\1\162\43\0\1\45\56\0\1\124\33\0\1\163\27\0"+
    "\1\36\43\0\1\36\3\0\1\112\51\0\1\164\50\0"+
    "\1\165\53\0\1\166\25\0\1\131\51\0\1\167\43\0"+
    "\1\170\50\0\1\171\30\0\1\172\46\0\1\45\40\0"+
    "\1\173\56\0\1\174\26\0\1\175\1\176\7\0\1\177"+
    "\1\200\7\0\1\201\31\0\1\114\50\0\1\114\30\0"+
    "\1\202\52\0\1\203\3\0\1\204\45\0\1\107\35\0"+
    "\1\205\42\0\1\206\41\0\1\207\52\0\1\210\43\0"+
    "\1\137\46\0\1\211\25\0\1\212\47\0\1\213\54\0"+
    "\1\203\3\0\1\214\35\0\1\215\36\0\1\210\40\0"+
    "\1\75\37\0\1\203\52\0\1\77\35\0\1\216\61\0"+
    "\1\174\40\0\1\217\56\0\1\220\43\0\1\221\23\0"+
    "\1\107\53\0\1\222\43\0\1\223\51\0\1\224\21\0"+
    "\1\45\57\0\1\225\53\0\1\226\15\0\1\227\71\0"+
    "\1\230\15\0\1\231\15\0\1\232\44\0\1\233\23\0"+
    "\1\176\60\0\1\114\27\0\1\234\53\0\1\45\53\0"+
    "\1\64\26\0\1\66\55\0\1\235\41\0\1\45\27\0"+
    "\1\236\53\0\1\45\52\0\1\237\32\0\1\45\35\0"+
    "\1\240\52\0\1\241\53\0\1\137\40\0\1\242\46\0"+
    "\1\243\25\0\1\244\52\0\1\245\53\0\1\246\43\0"+
    "\1\247\23\0\1\250\52\0\1\251\62\0\1\45\34\0"+
    "\1\252\44\0\1\107\32\0\1\203\46\0\1\253\30\0"+
    "\1\254\63\0\1\255\42\0\1\256\36\0\1\257\37\0"+
    "\1\115\35\0\1\205\62\0\1\260\52\0\1\160\23\0"+
    "\1\45\45\0\1\261\34\0\1\262\57\0\1\107\34\0"+
    "\1\263\51\0\1\257\47\0\1\264\42\0\1\45\45\0"+
    "\1\254\37\0\1\265\36\0\1\45\35\0\1\266\43\0"+
    "\1\267\41\0\1\270\51\0\1\271\55\0\1\272\53\0"+
    "\1\107\31\0\1\45\32\0\1\247\53\0\1\273\34\0"+
    "\1\203\62\0\1\274\35\0\1\275\51\0\1\276\23\0"+
    "\1\176\40\0\1\270\47\0\1\107\37\0\1\77\47\0"+
    "\1\277\52\0\1\205\33\0\1\300\43\0\1\301\55\0"+
    "\1\272\37\0\1\302\44\0\1\303\30\0\1\304\52\0"+
    "\1\305\35\0\1\306\62\0\1\114\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\30\1\4\0\1\1\1\0\1\1\2\0"+
    "\1\11\75\0\1\1\27\0\1\1\45\0\1\1\25\0"+
    "\1\1\17\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public String lexeme ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 5: break;
          case 2: 
            { /*ignore*/
            }
          case 6: break;
          case 3: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 7: break;
          case 4: 
            { lexeme=yytext(); return RESERVE_WORD;
            }
          case 8: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
