/* The following code was generated by JFlex 1.6.1 */

package php_lexicalanalyzer;
import static php_lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/php_lexicalanalyzer/Rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\2\1\103\1\2\1\2\22\0\1\1\1\35"+
    "\1\76\1\36\1\63\1\37\1\40\1\75\1\41\1\42\1\45\1\57"+
    "\1\61\1\56\1\60\1\64\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\51\1\52\1\54\1\43\1\53\1\44"+
    "\1\0\1\72\3\0\1\65\1\71\5\0\1\73\5\0\1\67\1\74"+
    "\1\66\1\70\5\0\1\46\1\36\1\47\1\0\1\50\1\0\1\16"+
    "\1\32\1\30\1\20\1\6\1\21\1\22\1\23\1\13\1\24\1\25"+
    "\1\26\1\34\1\33\1\14\1\15\1\4\1\7\1\17\1\10\1\12"+
    "\1\31\1\5\1\27\1\11\1\24\1\77\1\55\1\100\1\36\6\0"+
    "\1\103\33\0\1\36\6\0\1\36\3\0\1\36\3\0\1\36\16\0"+
    "\1\36\61\0\1\24\u1f26\0\1\101\1\102\16\0\1\103\1\103\udfd3\0"+
    "\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\1\3\25\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\2\1\6\1\2\1\12\2\13"+
    "\1\2\1\6\1\2\1\6\4\2\2\0\15\4\1\14"+
    "\2\4\1\5\27\4\1\5\1\14\2\0\5\15\2\0"+
    "\1\16\3\0\1\17\1\0\1\20\1\0\37\4\1\14"+
    "\12\4\3\0\13\15\4\0\1\14\10\4\1\21\16\4"+
    "\1\0\13\4\3\0\13\15\1\16\1\21\22\4\1\14"+
    "\5\4\2\0\1\15\1\22\7\15\7\4\1\14\6\4"+
    "\1\0\10\15\1\14\5\4\2\0\2\4\1\23\5\15"+
    "\2\4\2\0\1\14\1\4\4\15\1\4\4\0\1\4"+
    "\3\15\2\0\1\24\1\4\3\15\2\0\1\4\3\15"+
    "\1\25\10\0\1\4\3\15\10\0\1\4\2\15\6\0"+
    "\1\4\12\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\104\0\u072c\0\104\0\104\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\104\0\104\0\u0880\0\u08c4\0\u0908"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0154\0\u0ee0\0\u0f24"+
    "\0\u0154\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\104\0\104\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u0a5c\0\104"+
    "\0\u0aa0\0\u18b4\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u0154\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124"+
    "\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\u35a8\0\u17a4\0\104\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u160c\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158"+
    "\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378"+
    "\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598"+
    "\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\104"+
    "\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994"+
    "\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4"+
    "\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4"+
    "\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4"+
    "\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148\0\104\0\u518c\0\u51d0"+
    "\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0"+
    "\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610"+
    "\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830"+
    "\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50"+
    "\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\3\6\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\6\1\33\1\2\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\36\1\37\1\43\1\44"+
    "\1\37\1\45\1\46\1\47\1\50\1\34\1\2\1\44"+
    "\1\2\1\51\1\52\1\2\1\53\2\2\1\54\3\2"+
    "\1\55\1\56\1\36\1\37\2\2\106\0\1\3\104\0"+
    "\1\4\104\0\1\5\54\0\1\57\3\0\1\57\1\60"+
    "\21\0\32\6\13\0\1\6\36\0\20\6\1\61\11\6"+
    "\13\0\1\6\36\0\23\6\1\62\1\63\1\64\1\65"+
    "\1\6\1\66\1\67\13\0\1\6\36\0\3\6\1\70"+
    "\26\6\13\0\1\6\36\0\4\6\1\71\13\6\1\72"+
    "\11\6\13\0\1\6\36\0\10\6\1\73\21\6\13\0"+
    "\1\6\36\0\14\6\1\74\13\6\1\75\1\6\13\0"+
    "\1\6\36\0\14\6\1\75\1\6\1\76\11\6\1\77"+
    "\1\100\13\0\1\6\36\0\4\6\1\101\25\6\13\0"+
    "\1\6\36\0\4\6\1\102\2\6\1\103\22\6\13\0"+
    "\1\6\36\0\4\6\1\104\7\6\1\76\12\6\1\105"+
    "\1\106\1\6\13\0\1\6\36\0\2\6\1\107\2\6"+
    "\1\110\24\6\13\0\1\6\36\0\3\6\1\111\4\6"+
    "\1\112\1\76\20\6\13\0\1\6\36\0\7\6\1\113"+
    "\1\114\1\115\1\6\1\116\16\6\13\0\1\6\36\0"+
    "\11\6\1\117\11\6\1\120\6\6\13\0\1\6\36\0"+
    "\10\6\1\121\21\6\13\0\1\6\36\0\11\6\1\16"+
    "\20\6\13\0\1\6\36\0\11\6\1\122\1\6\1\123"+
    "\7\6\1\124\6\6\13\0\1\6\36\0\13\6\1\125"+
    "\16\6\13\0\1\6\36\0\4\6\1\126\25\6\13\0"+
    "\1\6\36\0\3\6\1\127\7\6\1\130\16\6\13\0"+
    "\1\6\76\0\1\45\100\0\1\131\106\0\1\45\7\0"+
    "\1\45\103\0\1\132\75\0\1\34\42\0\31\6\13\0"+
    "\1\133\76\0\1\45\1\134\114\0\1\131\31\0\1\5"+
    "\104\0\11\135\1\136\1\137\3\135\1\140\1\141\11\135"+
    "\13\0\1\142\100\0\1\143\16\0\1\144\106\0\1\145"+
    "\106\0\1\146\12\0\64\147\10\0\1\150\7\0\64\151"+
    "\11\0\1\150\10\0\1\152\52\0\1\153\103\0\2\57"+
    "\27\0\10\6\1\154\21\6\13\0\1\6\36\0\14\6"+
    "\1\155\15\6\13\0\1\6\36\0\5\6\1\156\2\6"+
    "\1\157\21\6\13\0\1\6\36\0\20\6\1\160\11\6"+
    "\13\0\1\6\36\0\13\6\1\161\16\6\13\0\1\6"+
    "\36\0\15\6\1\162\14\6\13\0\1\6\36\0\12\6"+
    "\1\163\17\6\13\0\1\6\36\0\1\6\1\164\3\6"+
    "\1\165\24\6\13\0\1\6\36\0\6\6\1\76\1\166"+
    "\3\6\1\167\16\6\13\0\1\6\36\0\4\6\1\170"+
    "\25\6\13\0\1\6\36\0\3\6\1\171\26\6\13\0"+
    "\1\6\36\0\3\6\1\76\26\6\13\0\1\6\36\0"+
    "\14\6\1\172\15\6\13\0\1\6\36\0\5\6\1\173"+
    "\6\6\1\174\10\6\1\175\4\6\13\0\1\6\36\0"+
    "\12\6\1\176\17\6\13\0\1\6\36\0\10\6\1\177"+
    "\1\200\20\6\13\0\1\6\36\0\27\6\1\201\2\6"+
    "\13\0\1\6\36\0\4\6\1\202\25\6\13\0\1\6"+
    "\36\0\14\6\1\203\15\6\13\0\1\6\36\0\15\6"+
    "\1\101\14\6\13\0\1\6\36\0\10\6\1\204\21\6"+
    "\13\0\1\6\36\0\13\6\1\205\16\6\13\0\1\6"+
    "\36\0\16\6\1\206\6\6\1\207\4\6\13\0\1\6"+
    "\36\0\3\6\1\210\26\6\13\0\1\6\36\0\30\6"+
    "\1\211\1\6\13\0\1\6\36\0\30\6\1\212\1\6"+
    "\13\0\1\6\36\0\4\6\1\213\25\6\13\0\1\6"+
    "\36\0\23\6\1\214\6\6\13\0\1\6\36\0\5\6"+
    "\1\160\24\6\13\0\1\6\36\0\11\6\1\215\20\6"+
    "\13\0\1\6\36\0\14\6\1\157\15\6\13\0\1\6"+
    "\36\0\30\6\1\216\1\6\13\0\1\6\36\0\5\6"+
    "\1\217\6\6\1\74\6\6\1\220\6\6\13\0\1\6"+
    "\36\0\11\6\1\221\1\6\1\222\16\6\13\0\1\6"+
    "\36\0\4\6\1\76\25\6\13\0\1\6\36\0\3\6"+
    "\1\223\26\6\13\0\1\6\36\0\2\6\1\76\27\6"+
    "\13\0\1\6\36\0\31\6\1\224\13\0\1\6\37\0"+
    "\17\6\1\225\11\6\13\0\1\226\50\0\1\227\71\0"+
    "\32\135\11\0\1\230\1\0\1\135\36\0\20\135\1\231"+
    "\11\135\11\0\1\230\1\0\1\135\36\0\4\135\1\232"+
    "\25\135\11\0\1\230\1\0\1\135\36\0\23\135\1\233"+
    "\6\135\11\0\1\230\1\0\1\135\36\0\5\135\1\234"+
    "\24\135\11\0\1\230\1\0\1\135\37\0\2\135\1\235"+
    "\1\236\5\135\1\237\1\135\1\240\1\135\1\241\1\242"+
    "\5\135\1\243\4\135\13\0\1\244\34\0\44\143\1\245"+
    "\17\143\20\0\64\144\107\0\1\246\106\0\1\247\13\0"+
    "\1\152\103\0\23\6\1\74\6\6\13\0\1\6\36\0"+
    "\3\6\1\250\26\6\13\0\1\6\36\0\3\6\1\251"+
    "\26\6\13\0\1\6\36\0\5\6\1\210\24\6\13\0"+
    "\1\6\36\0\11\6\1\76\20\6\13\0\1\6\36\0"+
    "\23\6\1\210\6\6\13\0\1\6\36\0\2\6\1\7"+
    "\5\6\1\252\3\6\1\253\1\254\1\255\13\6\13\0"+
    "\1\6\36\0\5\6\1\256\24\6\13\0\1\6\36\0"+
    "\7\6\1\257\22\6\13\0\1\6\36\0\7\6\1\260"+
    "\22\6\13\0\1\6\36\0\3\6\1\261\26\6\13\0"+
    "\1\6\36\0\10\6\1\262\21\6\13\0\1\6\36\0"+
    "\11\6\1\127\20\6\13\0\1\6\36\0\23\6\1\263"+
    "\6\6\13\0\1\6\36\0\3\6\1\157\26\6\13\0"+
    "\1\6\36\0\3\6\1\264\26\6\13\0\1\6\36\0"+
    "\5\6\1\265\24\6\13\0\1\6\36\0\23\6\1\266"+
    "\6\6\13\0\1\6\36\0\23\6\1\267\6\6\13\0"+
    "\1\6\36\0\26\6\1\270\1\6\1\262\1\6\13\0"+
    "\1\6\36\0\5\6\1\271\24\6\13\0\1\6\36\0"+
    "\23\6\1\272\6\6\13\0\1\6\36\0\13\6\1\256"+
    "\16\6\13\0\1\6\36\0\5\6\1\273\24\6\13\0"+
    "\1\6\36\0\5\6\1\217\24\6\13\0\1\6\36\0"+
    "\5\6\1\274\24\6\13\0\1\6\36\0\10\6\1\275"+
    "\2\6\1\276\16\6\13\0\1\6\36\0\23\6\1\277"+
    "\6\6\13\0\1\6\36\0\32\6\4\0\1\300\6\0"+
    "\1\6\36\0\25\6\1\301\4\6\13\0\1\6\36\0"+
    "\13\6\1\302\16\6\13\0\1\6\36\0\3\6\1\303"+
    "\26\6\13\0\1\6\36\0\14\6\1\166\15\6\13\0"+
    "\1\6\36\0\27\6\1\304\2\6\13\0\1\6\36\0"+
    "\5\6\1\305\6\6\1\262\15\6\13\0\1\6\36\0"+
    "\25\6\1\306\4\6\13\0\1\6\36\0\23\6\1\307"+
    "\6\6\13\0\1\6\36\0\30\6\1\74\1\6\13\0"+
    "\1\6\36\0\14\6\1\310\15\6\13\0\1\6\36\0"+
    "\13\6\1\311\16\6\13\0\1\6\36\0\3\6\1\312"+
    "\26\6\13\0\1\6\36\0\13\6\1\313\16\6\13\0"+
    "\1\6\37\0\31\6\13\0\1\226\56\0\1\314\142\0"+
    "\1\315\16\0\1\316\5\0\12\135\1\317\17\135\11\0"+
    "\1\230\1\0\1\135\36\0\17\135\1\320\12\135\11\0"+
    "\1\230\1\0\1\135\36\0\11\135\1\321\20\135\11\0"+
    "\1\230\1\0\1\135\36\0\5\135\1\322\24\135\11\0"+
    "\1\230\1\0\1\135\36\0\30\135\1\323\1\135\11\0"+
    "\1\230\1\0\1\135\36\0\3\135\1\324\26\135\11\0"+
    "\1\230\1\0\1\135\36\0\11\135\1\325\20\135\11\0"+
    "\1\230\1\0\1\135\36\0\3\135\1\326\26\135\11\0"+
    "\1\230\1\0\1\135\36\0\10\135\1\327\21\135\11\0"+
    "\1\230\1\0\1\135\36\0\3\135\1\330\26\135\11\0"+
    "\1\230\1\0\1\135\36\0\11\135\1\331\20\135\11\0"+
    "\1\230\1\0\1\135\37\0\31\135\13\0\1\244\34\0"+
    "\44\143\1\245\16\143\1\332\104\0\1\333\112\0\1\246"+
    "\12\0\10\6\1\252\21\6\13\0\1\6\36\0\30\6"+
    "\1\334\1\6\13\0\1\6\36\0\16\6\1\76\13\6"+
    "\13\0\1\6\36\0\2\6\1\107\27\6\13\0\1\6"+
    "\36\0\3\6\1\335\26\6\13\0\1\6\36\0\11\6"+
    "\1\115\20\6\13\0\1\6\36\0\6\6\1\210\23\6"+
    "\13\0\1\6\36\0\10\6\1\336\21\6\13\0\1\6"+
    "\36\0\4\6\1\337\25\6\13\0\1\6\36\0\5\6"+
    "\1\76\24\6\13\0\1\6\36\0\15\6\1\76\14\6"+
    "\13\0\1\6\36\0\4\6\1\340\25\6\13\0\1\6"+
    "\36\0\3\6\1\341\7\6\1\342\16\6\13\0\1\6"+
    "\36\0\7\6\1\343\22\6\13\0\1\6\36\0\3\6"+
    "\1\344\26\6\13\0\1\6\36\0\13\6\1\345\16\6"+
    "\13\0\1\6\36\0\3\6\1\346\26\6\13\0\1\6"+
    "\36\0\10\6\1\347\21\6\13\0\1\6\36\0\4\6"+
    "\1\350\25\6\13\0\1\6\36\0\10\6\1\351\21\6"+
    "\13\0\1\6\36\0\30\6\1\352\1\6\13\0\1\6"+
    "\36\0\7\6\1\353\22\6\13\0\1\6\36\0\13\6"+
    "\1\354\16\6\13\0\1\6\75\0\1\132\44\0\5\6"+
    "\1\355\24\6\13\0\1\6\36\0\23\6\1\356\6\6"+
    "\13\0\1\6\36\0\13\6\1\217\16\6\13\0\1\6"+
    "\36\0\13\6\1\357\16\6\13\0\1\6\36\0\10\6"+
    "\1\360\21\6\13\0\1\6\36\0\20\6\1\76\11\6"+
    "\13\0\1\6\36\0\13\6\1\361\16\6\13\0\1\6"+
    "\36\0\14\6\1\76\15\6\13\0\1\6\36\0\22\6"+
    "\1\76\7\6\13\0\1\6\36\0\14\6\1\362\15\6"+
    "\13\0\1\6\36\0\23\6\1\363\6\6\13\0\1\6"+
    "\50\0\1\132\72\0\31\364\13\0\1\315\37\0\31\365"+
    "\13\0\1\316\36\0\32\135\11\0\1\230\1\0\1\366"+
    "\36\0\25\135\2\367\3\135\11\0\1\230\1\0\1\135"+
    "\36\0\27\135\1\370\2\135\11\0\1\230\1\0\1\135"+
    "\36\0\12\135\1\371\17\135\11\0\1\230\1\0\1\135"+
    "\36\0\26\135\1\367\3\135\11\0\1\230\1\0\1\135"+
    "\36\0\1\135\1\372\30\135\11\0\1\230\1\0\1\135"+
    "\36\0\14\135\1\330\15\135\11\0\1\230\1\0\1\135"+
    "\36\0\4\135\1\373\7\135\1\374\15\135\11\0\1\230"+
    "\1\0\1\135\36\0\23\135\1\375\6\135\11\0\1\230"+
    "\1\0\1\135\36\0\5\135\1\367\24\135\11\0\1\230"+
    "\1\0\1\135\36\0\11\135\1\376\20\135\11\0\1\230"+
    "\1\0\1\135\36\0\15\6\1\310\14\6\13\0\1\6"+
    "\36\0\25\6\1\207\4\6\13\0\1\6\36\0\4\6"+
    "\1\377\25\6\13\0\1\6\36\0\30\6\1\76\1\6"+
    "\13\0\1\6\36\0\16\6\1\u0100\13\6\13\0\1\6"+
    "\36\0\13\6\1\u0101\16\6\13\0\1\6\36\0\30\6"+
    "\1\u0102\1\6\13\0\1\6\36\0\15\6\1\377\14\6"+
    "\13\0\1\6\36\0\31\6\1\u0103\13\0\1\6\36\0"+
    "\5\6\1\u0104\24\6\13\0\1\6\36\0\25\6\1\u0105"+
    "\4\6\13\0\1\6\36\0\25\6\1\u0106\4\6\13\0"+
    "\1\6\36\0\13\6\1\u0107\16\6\13\0\1\6\36\0"+
    "\25\6\1\76\4\6\13\0\1\6\36\0\3\6\1\u0108"+
    "\26\6\13\0\1\6\36\0\23\6\1\262\6\6\13\0"+
    "\1\6\36\0\4\6\1\74\25\6\13\0\1\6\36\0"+
    "\10\6\1\u0109\21\6\13\0\1\6\36\0\23\6\1\u010a"+
    "\6\6\13\0\1\6\36\0\23\6\1\76\6\6\13\0"+
    "\1\6\36\0\30\6\1\u010b\1\6\13\0\1\6\36\0"+
    "\27\6\1\154\2\6\13\0\1\6\36\0\12\6\1\u0100"+
    "\17\6\13\0\1\6\36\0\5\6\1\u010c\24\6\13\0"+
    "\1\6\36\0\32\364\13\0\1\364\11\0\1\u010d\24\0"+
    "\32\365\13\0\1\365\31\0\1\u010d\4\0\3\135\1\u010e"+
    "\26\135\11\0\1\230\1\0\1\135\36\0\13\135\1\u010f"+
    "\16\135\11\0\1\230\1\0\1\135\36\0\32\135\11\0"+
    "\1\230\1\0\1\u0110\36\0\7\135\1\u0111\22\135\11\0"+
    "\1\230\1\0\1\135\36\0\26\135\1\u0112\3\135\11\0"+
    "\1\230\1\0\1\135\36\0\14\135\1\u0113\15\135\11\0"+
    "\1\230\1\0\1\135\36\0\3\135\1\u0114\26\135\11\0"+
    "\1\230\1\0\1\135\36\0\22\135\1\u0115\7\135\11\0"+
    "\1\230\1\0\1\135\36\0\3\6\1\u0116\26\6\13\0"+
    "\1\6\36\0\13\6\1\u0117\16\6\13\0\1\6\36\0"+
    "\15\6\1\u0118\14\6\13\0\1\6\36\0\25\6\1\u0119"+
    "\4\6\13\0\1\6\36\0\3\6\1\u011a\26\6\13\0"+
    "\1\6\36\0\3\6\1\u0106\26\6\13\0\1\6\36\0"+
    "\5\6\1\u011b\24\6\13\0\1\6\34\0\1\u011c\1\0"+
    "\32\6\13\0\1\6\36\0\25\6\1\262\4\6\13\0"+
    "\1\6\36\0\32\6\4\0\1\u011d\6\0\1\6\36\0"+
    "\11\6\1\u011e\20\6\13\0\1\6\36\0\6\6\1\76"+
    "\23\6\13\0\1\6\36\0\7\6\1\74\22\6\13\0"+
    "\1\6\36\0\32\6\13\0\1\u011f\102\0\1\u0120\37\0"+
    "\4\135\1\u0121\25\135\11\0\1\230\1\0\1\135\36\0"+
    "\23\135\1\u0114\6\135\11\0\1\230\1\0\1\135\36\0"+
    "\4\135\1\u0122\25\135\11\0\1\230\1\0\1\135\36\0"+
    "\3\135\1\325\26\135\11\0\1\230\1\0\1\135\36\0"+
    "\3\135\1\u0123\26\135\11\0\1\230\1\0\1\135\36\0"+
    "\10\135\1\u0124\21\135\11\0\1\230\1\0\1\135\36\0"+
    "\14\135\1\367\15\135\11\0\1\230\1\0\1\135\36\0"+
    "\10\135\1\u0125\21\135\11\0\1\230\1\0\1\135\36\0"+
    "\32\6\13\0\1\u0126\36\0\25\6\1\74\4\6\13\0"+
    "\1\6\36\0\11\6\1\252\20\6\13\0\1\6\36\0"+
    "\3\6\1\u0118\26\6\13\0\1\6\36\0\30\6\1\u0127"+
    "\1\6\13\0\1\6\36\0\3\6\1\263\26\6\13\0"+
    "\1\6\63\0\1\u0128\150\0\1\u0129\11\0\30\6\1\u012a"+
    "\1\6\13\0\1\6\36\0\25\6\1\u012b\4\6\13\0"+
    "\1\6\36\0\4\135\1\u012c\25\135\11\0\1\230\1\0"+
    "\1\135\36\0\3\135\1\u012d\7\135\1\u012e\16\135\11\0"+
    "\1\230\1\0\1\135\36\0\4\135\1\367\25\135\11\0"+
    "\1\230\1\0\1\135\36\0\11\135\1\u012f\20\135\11\0"+
    "\1\230\1\0\1\135\36\0\3\135\1\367\26\135\11\0"+
    "\1\230\1\0\1\135\36\0\11\6\1\u0130\20\6\13\0"+
    "\1\6\36\0\5\6\1\310\24\6\13\0\1\6\47\0"+
    "\1\u0131\70\0\1\u0129\2\0\31\u0132\13\0\1\u0133\34\0"+
    "\1\u0134\1\0\32\6\13\0\1\6\36\0\11\6\1\u0135"+
    "\20\6\13\0\1\6\36\0\11\135\1\u0136\20\135\11\0"+
    "\1\230\1\0\1\135\36\0\14\135\1\u0137\15\135\11\0"+
    "\1\230\1\0\1\135\36\0\2\135\1\u0138\27\135\11\0"+
    "\1\230\1\0\1\135\36\0\30\135\1\367\1\135\11\0"+
    "\1\230\1\0\1\135\36\0\30\6\1\u0117\1\6\13\0"+
    "\1\6\66\0\1\u0139\53\0\32\u0132\13\0\1\u0132\24\0"+
    "\1\u013a\12\0\31\u0132\13\0\1\u0133\37\0\31\u013b\13\0"+
    "\1\u0134\36\0\31\6\1\u013c\13\0\1\6\36\0\4\135"+
    "\1\u013d\25\135\11\0\1\230\1\0\1\135\36\0\12\135"+
    "\1\u013e\17\135\11\0\1\230\1\0\1\135\36\0\32\135"+
    "\11\0\1\230\1\0\1\u013f\52\0\1\u0140\145\0\1\u0141"+
    "\25\0\32\u013b\13\0\1\u013b\36\0\12\6\1\u0142\17\6"+
    "\13\0\1\6\36\0\31\135\1\u0143\11\0\1\230\1\0"+
    "\1\135\36\0\11\135\1\u0144\20\135\11\0\1\230\1\0"+
    "\1\135\36\0\12\135\1\u0145\17\135\11\0\1\230\1\0"+
    "\1\135\43\0\1\u0146\74\0\1\u0141\1\0\1\u0147\4\0"+
    "\1\u0148\10\0\1\u0149\34\0\1\u014a\7\0\1\u014b\2\0"+
    "\1\u014c\3\0\1\u014d\1\u014e\10\0\10\6\1\u014f\21\6"+
    "\13\0\1\6\36\0\14\135\1\u0150\15\135\11\0\1\230"+
    "\1\0\1\135\36\0\30\135\1\u0151\1\135\11\0\1\230"+
    "\1\0\1\135\36\0\11\135\1\u0152\20\135\11\0\1\230"+
    "\1\0\1\135\34\0\1\u0153\1\0\1\u0147\54\0\1\u0154"+
    "\3\0\1\u0154\1\u0155\7\0\1\u0156\15\0\1\u0157\112\0"+
    "\1\u0158\70\0\1\u0147\167\0\1\u0159\106\0\1\u015a\12\0"+
    "\64\u014d\10\0\1\u0153\7\0\64\u014e\11\0\1\u0153\10\0"+
    "\23\6\1\u015b\6\6\13\0\1\6\36\0\17\135\1\367"+
    "\12\135\11\0\1\230\1\0\1\135\36\0\14\135\1\u015c"+
    "\15\135\11\0\1\230\1\0\1\135\36\0\14\135\1\u015d"+
    "\15\135\11\0\1\230\1\0\1\135\34\0\1\u0153\73\0"+
    "\1\u0156\11\0\1\u015e\52\0\1\u015f\103\0\2\u0154\66\0"+
    "\1\u0146\53\0\1\u0160\117\0\1\u0161\145\0\1\u0162\106\0"+
    "\1\u0163\13\0\3\6\1\u0164\26\6\13\0\1\6\36\0"+
    "\3\135\1\u0165\26\135\11\0\1\230\1\0\1\135\36\0"+
    "\5\135\1\u0166\24\135\11\0\1\230\1\0\1\135\34\0"+
    "\1\u0153\1\0\1\u015e\71\0\1\u0156\11\0\1\u015e\106\0"+
    "\1\u0153\114\0\1\u0160\151\0\1\u0153\112\0\1\u0162\12\0"+
    "\4\6\1\210\25\6\13\0\1\6\36\0\32\135\11\0"+
    "\1\230\1\0\1\u0167\36\0\32\135\11\0\1\230\1\0"+
    "\1\u0168\36\0\20\135\1\u0169\11\135\11\0\1\230\1\0"+
    "\1\135\36\0\15\135\1\u016a\14\135\11\0\1\230\1\0"+
    "\1\135\36\0\3\135\1\u016b\26\135\11\0\1\230\1\0"+
    "\1\135\36\0\13\135\1\u016c\16\135\11\0\1\230\1\0"+
    "\1\135\36\0\13\135\1\u016d\16\135\11\0\1\230\1\0"+
    "\1\135\36\0\5\135\1\u016e\24\135\11\0\1\230\1\0"+
    "\1\135\36\0\15\135\1\u0112\14\135\11\0\1\230\1\0"+
    "\1\135\36\0\13\135\1\367\16\135\11\0\1\230\1\0"+
    "\1\135\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23596];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\31\1\1\11\1\1\2\11\4\1\2\11"+
    "\11\1\2\0\50\1\2\11\2\0\5\1\2\0\1\1"+
    "\3\0\1\11\1\0\1\1\1\0\52\1\3\0\13\1"+
    "\4\0\30\1\1\0\13\1\3\0\14\1\1\11\30\1"+
    "\2\0\27\1\1\0\16\1\2\0\2\1\1\11\7\1"+
    "\2\0\7\1\4\0\4\1\2\0\5\1\2\0\4\1"+
    "\1\11\10\0\4\1\10\0\3\1\6\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public String lexeme ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*ignore*/
            }
          case 22: break;
          case 2: 
            { lexeme=yytext(); return Error;
            }
          case 23: break;
          case 3: 
            { lexeme=yytext(); return Int_value;
            }
          case 24: break;
          case 4: 
            { lexeme=yytext(); return Identifier;
            }
          case 25: break;
          case 5: 
            { lexeme=yytext(); return Logical_operator;
            }
          case 26: break;
          case 6: 
            { lexeme=yytext(); return Arithmetic_operator;
            }
          case 27: break;
          case 7: 
            { lexeme=yytext(); return Opening;
            }
          case 28: break;
          case 8: 
            { lexeme=yytext(); return Closing;
            }
          case 29: break;
          case 9: 
            { lexeme=yytext(); return Asignation_operator;
            }
          case 30: break;
          case 10: 
            { lexeme=yytext(); return Continue_sign;
            }
          case 31: break;
          case 11: 
            { lexeme=yytext(); return Comparison_operator;
            }
          case 32: break;
          case 12: 
            { lexeme=yytext(); return Reserve_word;
            }
          case 33: break;
          case 13: 
            { lexeme=yytext(); return Variable;
            }
          case 34: break;
          case 14: 
            { lexeme=yytext(); return Comments;
            }
          case 35: break;
          case 15: 
            { lexeme=yytext(); return String_value;
            }
          case 36: break;
          case 16: 
            { lexeme=yytext(); return Real_value;
            }
          case 37: break;
          case 17: 
            { lexeme=yytext(); return Boolean_value;
            }
          case 38: break;
          case 18: 
            { lexeme=yytext(); return Default_variables;
            }
          case 39: break;
          case 19: 
            { lexeme=yytext(); return Access_field;
            }
          case 40: break;
          case 20: 
            { lexeme=yytext(); return Function;
            }
          case 41: break;
          case 21: 
            { lexeme=yytext(); return Constants;
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
