/* The following code was generated by JFlex 1.6.1 */

package php_lexicalanalyzer;
import static php_lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/php_lexicalanalyzer/Rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\63\1\63\1\63\1\67\1\63\1\63\22\0\1\1\1\44"+
    "\1\0\1\45\1\61\1\46\1\47\1\65\1\50\1\51\1\53\1\60"+
    "\1\66\1\57\1\64\1\62\1\2\1\2\1\2\1\2\1\2\1\2"+
    "\1\2\1\2\1\2\1\2\1\45\1\55\1\45\1\52\1\45\1\45"+
    "\1\0\1\40\1\23\1\23\1\23\1\34\1\42\1\23\1\23\1\23"+
    "\1\23\1\23\1\43\1\23\1\23\1\23\1\23\1\23\1\35\1\41"+
    "\1\36\1\37\1\23\1\23\1\23\1\23\1\23\1\45\1\0\1\45"+
    "\1\0\1\54\1\0\1\15\1\31\1\27\1\17\1\5\1\20\1\21"+
    "\1\22\1\12\1\23\1\24\1\25\1\33\1\32\1\13\1\14\1\3"+
    "\1\6\1\16\1\7\1\11\1\30\1\4\1\26\1\10\1\23\1\0"+
    "\1\56\1\0\1\45\6\0\1\67\33\0\1\45\6\0\1\45\3\0"+
    "\1\45\3\0\1\45\40\0\1\23\37\0\1\23\u1f36\0\1\67\1\67"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\27\4\6\1\5\0\15\4"+
    "\1\5\32\4\6\0\1\6\2\0\1\6\1\7\4\0"+
    "\1\10\1\0\37\4\1\5\13\4\4\0\1\11\1\4"+
    "\4\0\1\6\6\0\1\12\1\5\10\4\1\13\15\4"+
    "\1\0\14\4\7\0\1\4\2\0\1\6\5\0\1\6"+
    "\7\0\4\4\1\0\15\4\1\5\1\4\1\5\3\4"+
    "\1\5\2\4\1\11\7\0\1\4\2\0\3\6\2\0"+
    "\7\4\1\5\4\4\1\13\1\4\12\0\1\4\1\6"+
    "\3\0\1\5\5\4\14\0\1\11\1\4\4\0\2\4"+
    "\14\0\1\11\1\4\3\0\1\4\12\0\1\11\10\0"+
    "\1\4\5\0\1\14\7\0\1\11\7\0\1\4\21\0"+
    "\1\4\10\0\1\4\11\0\1\4\16\0\1\4\24\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0658\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\250\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u0690\0\u12d0\0\u1308\0\u1340\0\u1378\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\70\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338"+
    "\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8"+
    "\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u05b0"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40"+
    "\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100"+
    "\0\u3138\0\u3170\0\70\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8"+
    "\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988"+
    "\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08"+
    "\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8"+
    "\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088"+
    "\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248"+
    "\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408"+
    "\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8"+
    "\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788"+
    "\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u3988\0\u4910"+
    "\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0"+
    "\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\70\0\u4c20\0\u4c58"+
    "\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u4e18"+
    "\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0\0\u4fd8"+
    "\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198"+
    "\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358"+
    "\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0\0\u5518"+
    "\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630\0\u5668\0\u56a0\0\u56d8"+
    "\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898"+
    "\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8\0\u5a20\0\u5a58"+
    "\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u5be0\0\u5c18"+
    "\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68\0\u5da0\0\u5dd8"+
    "\0\u5e10\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\5\1\32\3\5\1\33\1\5\1\34\7\2"+
    "\1\35\2\2\1\36\1\37\1\40\1\2\1\3\1\2"+
    "\1\41\1\2\72\0\1\42\1\4\31\0\1\43\11\0"+
    "\1\44\4\0\1\45\3\0\2\44\1\0\1\44\1\0"+
    "\1\46\5\0\42\5\10\0\1\5\15\0\20\5\1\47"+
    "\21\5\10\0\1\5\15\0\23\5\1\50\1\51\1\52"+
    "\1\53\1\5\1\54\1\55\10\5\10\0\1\5\15\0"+
    "\3\5\1\56\36\5\10\0\1\5\15\0\4\5\1\57"+
    "\13\5\1\60\21\5\10\0\1\5\15\0\10\5\1\61"+
    "\31\5\10\0\1\5\15\0\14\5\1\62\13\5\1\63"+
    "\11\5\10\0\1\5\15\0\14\5\1\63\1\5\1\64"+
    "\11\5\1\65\1\66\10\5\10\0\1\5\15\0\4\5"+
    "\1\64\35\5\10\0\1\5\15\0\4\5\1\67\2\5"+
    "\1\70\32\5\10\0\1\5\15\0\4\5\1\71\7\5"+
    "\1\64\12\5\1\72\1\73\11\5\10\0\1\5\15\0"+
    "\2\5\1\74\2\5\1\75\34\5\10\0\1\5\15\0"+
    "\3\5\1\76\4\5\1\77\1\64\30\5\10\0\1\5"+
    "\15\0\7\5\1\100\1\101\1\102\1\5\1\103\26\5"+
    "\10\0\1\5\15\0\11\5\1\104\11\5\1\105\16\5"+
    "\10\0\1\5\15\0\10\5\1\106\31\5\10\0\1\5"+
    "\15\0\11\5\1\15\30\5\10\0\1\5\15\0\11\5"+
    "\1\107\1\5\1\110\7\5\1\111\16\5\10\0\1\5"+
    "\15\0\13\5\1\15\26\5\10\0\1\5\15\0\4\5"+
    "\1\112\35\5\10\0\1\5\15\0\3\5\1\113\7\5"+
    "\1\114\26\5\10\0\1\5\15\0\33\5\1\115\6\5"+
    "\10\0\1\5\15\0\36\5\1\116\3\5\10\0\1\5"+
    "\22\0\1\117\10\0\1\120\15\0\1\121\3\0\1\122"+
    "\16\0\1\123\11\0\41\5\10\0\1\124\15\0\1\125"+
    "\54\0\1\126\1\0\1\127\10\0\1\130\54\0\1\126"+
    "\1\0\1\127\11\0\41\131\10\0\1\132\14\0\60\133"+
    "\55\0\1\134\4\0\1\135\3\0\2\134\1\0\1\134"+
    "\64\0\2\46\11\0\1\130\50\0\1\44\3\0\1\126"+
    "\1\0\1\127\10\0\1\136\54\0\1\137\12\0\10\5"+
    "\1\140\31\5\10\0\1\5\15\0\14\5\1\141\25\5"+
    "\10\0\1\5\15\0\5\5\1\142\2\5\1\143\31\5"+
    "\10\0\1\5\15\0\20\5\1\144\21\5\10\0\1\5"+
    "\15\0\13\5\1\145\26\5\10\0\1\5\15\0\15\5"+
    "\1\146\24\5\10\0\1\5\15\0\12\5\1\147\27\5"+
    "\10\0\1\5\15\0\1\5\1\150\3\5\1\151\34\5"+
    "\10\0\1\5\15\0\6\5\1\64\1\152\3\5\1\153"+
    "\26\5\10\0\1\5\15\0\4\5\1\154\35\5\10\0"+
    "\1\5\15\0\3\5\1\155\36\5\10\0\1\5\15\0"+
    "\3\5\1\64\36\5\10\0\1\5\15\0\14\5\1\156"+
    "\25\5\10\0\1\5\15\0\5\5\1\157\6\5\1\160"+
    "\10\5\1\161\14\5\10\0\1\5\15\0\12\5\1\162"+
    "\27\5\10\0\1\5\15\0\10\5\1\163\1\164\30\5"+
    "\10\0\1\5\15\0\27\5\1\165\12\5\10\0\1\5"+
    "\15\0\4\5\1\166\35\5\10\0\1\5\15\0\14\5"+
    "\1\167\25\5\10\0\1\5\15\0\15\5\1\64\24\5"+
    "\10\0\1\5\15\0\10\5\1\170\31\5\10\0\1\5"+
    "\15\0\13\5\1\171\26\5\10\0\1\5\15\0\16\5"+
    "\1\172\6\5\1\173\14\5\10\0\1\5\15\0\3\5"+
    "\1\174\36\5\10\0\1\5\15\0\30\5\1\175\11\5"+
    "\10\0\1\5\15\0\30\5\1\176\11\5\10\0\1\5"+
    "\15\0\4\5\1\177\35\5\10\0\1\5\15\0\23\5"+
    "\1\200\16\5\10\0\1\5\15\0\5\5\1\144\34\5"+
    "\10\0\1\5\15\0\11\5\1\201\30\5\10\0\1\5"+
    "\15\0\14\5\1\143\25\5\10\0\1\5\15\0\30\5"+
    "\1\202\11\5\10\0\1\5\15\0\5\5\1\203\6\5"+
    "\1\62\6\5\1\204\16\5\10\0\1\5\15\0\11\5"+
    "\1\205\1\5\1\206\26\5\10\0\1\5\15\0\3\5"+
    "\1\207\36\5\10\0\1\5\15\0\2\5\1\64\37\5"+
    "\10\0\1\5\15\0\31\5\1\210\10\5\10\0\1\5"+
    "\15\0\35\5\1\211\4\5\10\0\1\5\15\0\41\5"+
    "\1\212\10\0\1\5\21\0\1\213\76\0\1\214\107\0"+
    "\1\215\72\0\1\216\32\0\41\217\10\0\1\123\16\0"+
    "\17\5\1\220\21\5\10\0\1\221\14\0\1\222\1\125"+
    "\31\0\1\43\11\0\1\223\4\0\1\224\3\0\2\223"+
    "\1\0\1\223\1\0\1\46\5\0\1\130\70\0\41\225"+
    "\10\0\1\127\14\0\1\226\1\130\43\0\1\227\4\0"+
    "\1\230\3\0\2\227\1\0\1\227\6\0\1\231\42\131"+
    "\2\0\1\44\1\232\3\0\1\45\1\131\1\0\1\233"+
    "\2\44\1\0\1\44\6\0\60\133\4\0\1\234\3\0"+
    "\1\44\67\0\1\44\51\0\1\134\16\0\1\136\67\0"+
    "\23\5\1\62\16\5\10\0\1\5\15\0\3\5\1\235"+
    "\36\5\10\0\1\5\15\0\3\5\1\236\36\5\10\0"+
    "\1\5\15\0\5\5\1\174\34\5\10\0\1\5\15\0"+
    "\11\5\1\64\30\5\10\0\1\5\15\0\23\5\1\174"+
    "\16\5\10\0\1\5\15\0\2\5\1\6\5\5\1\237"+
    "\3\5\1\240\1\241\1\242\23\5\10\0\1\5\15\0"+
    "\5\5\1\243\34\5\10\0\1\5\15\0\7\5\1\244"+
    "\32\5\10\0\1\5\15\0\7\5\1\245\32\5\10\0"+
    "\1\5\15\0\3\5\1\246\36\5\10\0\1\5\15\0"+
    "\10\5\1\247\31\5\10\0\1\5\15\0\11\5\1\113"+
    "\30\5\10\0\1\5\15\0\23\5\1\73\16\5\10\0"+
    "\1\5\15\0\3\5\1\143\36\5\10\0\1\5\15\0"+
    "\3\5\1\250\36\5\10\0\1\5\15\0\5\5\1\251"+
    "\34\5\10\0\1\5\15\0\23\5\1\252\16\5\10\0"+
    "\1\5\15\0\23\5\1\253\16\5\10\0\1\5\15\0"+
    "\26\5\1\254\1\5\1\247\11\5\10\0\1\5\15\0"+
    "\5\5\1\255\34\5\10\0\1\5\15\0\23\5\1\256"+
    "\16\5\10\0\1\5\15\0\13\5\1\243\26\5\10\0"+
    "\1\5\15\0\5\5\1\257\34\5\10\0\1\5\15\0"+
    "\5\5\1\203\34\5\10\0\1\5\15\0\5\5\1\260"+
    "\34\5\10\0\1\5\15\0\10\5\1\261\2\5\1\262"+
    "\26\5\10\0\1\5\15\0\23\5\1\263\16\5\10\0"+
    "\1\5\15\0\42\5\4\0\1\264\3\0\1\5\15\0"+
    "\25\5\1\265\14\5\10\0\1\5\15\0\13\5\1\266"+
    "\26\5\10\0\1\5\15\0\3\5\1\267\36\5\10\0"+
    "\1\5\15\0\14\5\1\270\25\5\10\0\1\5\15\0"+
    "\27\5\1\271\12\5\10\0\1\5\15\0\5\5\1\272"+
    "\6\5\1\273\25\5\10\0\1\5\15\0\25\5\1\274"+
    "\14\5\10\0\1\5\15\0\23\5\1\275\16\5\10\0"+
    "\1\5\15\0\30\5\1\62\11\5\10\0\1\5\15\0"+
    "\14\5\1\276\25\5\10\0\1\5\15\0\13\5\1\277"+
    "\26\5\10\0\1\5\15\0\3\5\1\300\36\5\10\0"+
    "\1\5\15\0\32\5\1\246\7\5\10\0\1\5\15\0"+
    "\37\5\1\211\2\5\10\0\1\5\24\0\1\301\103\0"+
    "\1\302\101\0\1\303\73\0\1\304\25\0\1\305\42\217"+
    "\3\0\1\306\4\0\1\217\1\0\1\307\13\0\13\5"+
    "\1\310\26\5\10\0\1\5\16\0\41\5\10\0\1\221"+
    "\61\0\1\311\4\0\1\312\3\0\2\311\1\0\1\311"+
    "\7\0\1\313\54\0\1\314\1\315\1\316\10\0\1\313"+
    "\50\0\1\223\3\0\1\314\1\315\1\316\7\0\1\226"+
    "\42\225\2\0\1\227\4\0\1\230\1\225\2\0\2\227"+
    "\1\0\1\227\53\0\1\317\4\0\1\320\3\0\2\317"+
    "\1\0\1\317\7\0\1\321\54\0\1\314\1\315\1\322"+
    "\10\0\1\321\50\0\1\227\3\0\1\314\1\315\1\322"+
    "\21\0\1\323\1\0\1\324\10\0\1\325\17\0\1\134"+
    "\1\326\3\0\1\135\2\0\1\327\2\134\1\0\1\134"+
    "\54\0\1\330\76\0\1\330\13\0\10\5\1\237\31\5"+
    "\10\0\1\5\15\0\30\5\1\331\11\5\10\0\1\5"+
    "\15\0\16\5\1\64\23\5\10\0\1\5\15\0\2\5"+
    "\1\74\37\5\10\0\1\5\15\0\3\5\1\332\36\5"+
    "\10\0\1\5\15\0\11\5\1\102\30\5\10\0\1\5"+
    "\15\0\6\5\1\174\33\5\10\0\1\5\15\0\10\5"+
    "\1\333\31\5\10\0\1\5\15\0\4\5\1\334\35\5"+
    "\10\0\1\5\14\0\1\335\42\5\3\0\1\232\4\0"+
    "\1\5\1\0\1\233\13\0\5\5\1\64\34\5\10\0"+
    "\1\5\15\0\4\5\1\336\35\5\10\0\1\5\15\0"+
    "\3\5\1\337\7\5\1\340\26\5\10\0\1\5\15\0"+
    "\7\5\1\341\32\5\10\0\1\5\15\0\3\5\1\342"+
    "\36\5\10\0\1\5\15\0\13\5\1\343\26\5\10\0"+
    "\1\5\15\0\3\5\1\344\36\5\10\0\1\5\15\0"+
    "\10\5\1\345\31\5\10\0\1\5\15\0\4\5\1\346"+
    "\35\5\10\0\1\5\15\0\10\5\1\347\31\5\10\0"+
    "\1\5\15\0\30\5\1\350\11\5\10\0\1\5\15\0"+
    "\7\5\1\351\32\5\10\0\1\5\15\0\13\5\1\352"+
    "\26\5\10\0\1\5\64\0\1\353\20\0\5\5\1\354"+
    "\34\5\10\0\1\5\15\0\23\5\1\355\16\5\10\0"+
    "\1\5\15\0\13\5\1\203\26\5\10\0\1\5\15\0"+
    "\3\5\1\356\36\5\10\0\1\5\15\0\13\5\1\357"+
    "\26\5\10\0\1\5\15\0\10\5\1\360\31\5\10\0"+
    "\1\5\15\0\5\5\1\361\34\5\10\0\1\5\15\0"+
    "\20\5\1\64\21\5\10\0\1\5\15\0\13\5\1\362"+
    "\26\5\10\0\1\5\15\0\14\5\1\64\25\5\10\0"+
    "\1\5\15\0\22\5\1\64\17\5\10\0\1\5\15\0"+
    "\14\5\1\363\25\5\10\0\1\5\20\0\1\364\100\0"+
    "\1\365\105\0\1\364\74\0\1\303\41\0\1\366\1\0"+
    "\1\367\10\0\1\370\20\0\1\371\6\0\1\372\60\0"+
    "\1\373\76\0\1\373\13\0\23\5\1\374\16\5\10\0"+
    "\1\5\14\0\1\223\67\0\1\223\51\0\1\311\15\0"+
    "\1\222\1\313\43\0\1\223\4\0\1\224\3\0\2\223"+
    "\1\0\1\223\7\0\1\313\54\0\1\375\1\0\1\376"+
    "\10\0\1\377\54\0\1\375\1\0\1\376\11\0\41\u0100"+
    "\10\0\1\316\14\0\1\227\67\0\1\227\51\0\1\317"+
    "\15\0\1\42\1\321\43\0\1\44\4\0\1\45\3\0"+
    "\2\44\1\0\1\44\10\0\41\u0101\10\0\1\322\21\0"+
    "\1\u0102\113\0\1\u0103\50\0\1\323\123\0\1\u0102\76\0"+
    "\1\u0102\13\0\15\5\1\276\24\5\10\0\1\5\15\0"+
    "\25\5\1\173\14\5\10\0\1\5\15\0\4\5\1\u0104"+
    "\35\5\10\0\1\5\15\0\30\5\1\64\11\5\10\0"+
    "\1\5\26\0\1\323\1\0\1\324\10\0\1\325\20\0"+
    "\1\326\6\0\1\327\13\0\16\5\1\u0105\23\5\10\0"+
    "\1\5\15\0\13\5\1\u0106\26\5\10\0\1\5\15\0"+
    "\30\5\1\u0107\11\5\10\0\1\5\15\0\15\5\1\u0104"+
    "\24\5\10\0\1\5\15\0\31\5\1\u0108\10\5\10\0"+
    "\1\5\15\0\5\5\1\u0109\34\5\10\0\1\5\15\0"+
    "\25\5\1\u010a\14\5\10\0\1\5\15\0\25\5\1\u010b"+
    "\14\5\10\0\1\5\15\0\13\5\1\u010c\26\5\10\0"+
    "\1\5\15\0\25\5\1\64\14\5\10\0\1\5\15\0"+
    "\3\5\1\u010d\36\5\10\0\1\5\15\0\23\5\1\247"+
    "\16\5\10\0\1\5\15\0\4\5\1\62\35\5\10\0"+
    "\1\5\15\0\10\5\1\u010e\31\5\10\0\1\5\15\0"+
    "\23\5\1\u010f\16\5\10\0\1\5\15\0\42\5\10\0"+
    "\1\5\1\u0110\14\0\23\5\1\64\16\5\10\0\1\5"+
    "\15\0\30\5\1\u0111\11\5\10\0\1\5\14\0\1\u0112"+
    "\42\5\10\0\1\5\15\0\27\5\1\140\12\5\10\0"+
    "\1\5\15\0\12\5\1\u0105\27\5\10\0\1\5\14\0"+
    "\1\305\45\0\1\306\6\0\1\307\16\0\1\u0113\70\0"+
    "\1\u0114\113\0\1\u0115\50\0\1\366\123\0\1\u0114\76\0"+
    "\1\u0114\20\0\1\u0116\10\0\1\u0117\15\0\1\u0118\3\0"+
    "\1\u0119\1\0\1\u011a\14\0\1\u011b\10\0\5\5\1\u011c"+
    "\34\5\10\0\1\5\15\0\1\377\70\0\41\u011d\10\0"+
    "\1\376\14\0\1\u011e\1\377\43\0\1\u011f\4\0\1\u0120"+
    "\3\0\2\u011f\1\0\1\u011f\6\0\1\222\42\u0100\2\0"+
    "\1\223\4\0\1\224\1\u0100\2\0\2\223\1\0\1\223"+
    "\6\0\1\42\42\u0101\2\0\1\44\4\0\1\45\1\u0101"+
    "\2\0\2\44\1\0\1\44\6\0\1\330\105\0\1\u0102"+
    "\52\0\3\5\1\u0121\36\5\10\0\1\5\15\0\13\5"+
    "\1\u0122\26\5\10\0\1\5\15\0\15\5\1\u0123\24\5"+
    "\10\0\1\5\15\0\25\5\1\u0124\14\5\10\0\1\5"+
    "\15\0\3\5\1\u0125\36\5\10\0\1\5\15\0\3\5"+
    "\1\u010b\36\5\10\0\1\5\15\0\5\5\1\u0126\34\5"+
    "\10\0\1\5\14\0\1\u0127\42\5\10\0\1\5\15\0"+
    "\25\5\1\247\14\5\10\0\1\5\15\0\42\5\4\0"+
    "\1\u0128\3\0\1\5\15\0\11\5\1\334\30\5\10\0"+
    "\1\5\15\0\6\5\1\64\33\5\10\0\1\5\14\0"+
    "\1\335\45\0\1\232\6\0\1\233\13\0\7\5\1\62"+
    "\32\5\10\0\1\5\16\0\41\u0129\10\0\1\u0112\70\0"+
    "\1\364\13\0\1\373\105\0\1\u0114\56\0\1\u012a\76\0"+
    "\1\u012b\107\0\1\u012c\72\0\1\u012d\36\0\1\u012e\10\0"+
    "\1\u012f\15\0\1\u0130\3\0\1\u0131\16\0\1\u0132\11\0"+
    "\41\u0133\10\0\1\u011b\15\0\42\5\10\0\1\u0134\14\0"+
    "\1\u011e\42\u011d\2\0\1\u011f\4\0\1\u0120\1\u011d\2\0"+
    "\2\u011f\1\0\1\u011f\53\0\1\u0135\4\0\1\u0136\3\0"+
    "\2\u0135\1\0\1\u0135\7\0\1\u0137\54\0\1\314\1\315"+
    "\1\u0138\10\0\1\u0137\50\0\1\u011f\3\0\1\314\1\315"+
    "\1\u0138\10\0\42\5\10\0\1\u0139\15\0\25\5\1\62"+
    "\14\5\10\0\1\5\15\0\11\5\1\237\30\5\10\0"+
    "\1\5\15\0\3\5\1\u0123\36\5\10\0\1\5\15\0"+
    "\30\5\1\u013a\11\5\10\0\1\5\15\0\3\5\1\73"+
    "\36\5\10\0\1\5\42\0\1\u013b\125\0\1\u013c\3\0"+
    "\1\u013d\42\u0129\6\0\1\u013e\1\0\1\u0129\24\0\1\u013f"+
    "\103\0\1\u0140\101\0\1\u0141\73\0\1\u0142\32\0\1\u0143"+
    "\76\0\1\u0144\107\0\1\u0145\72\0\1\u0146\32\0\41\u0147"+
    "\10\0\1\u0132\14\0\1\335\42\u0133\3\0\1\232\4\0"+
    "\1\u0133\1\0\1\233\13\0\25\5\1\u0148\14\5\10\0"+
    "\1\5\14\0\1\u011f\67\0\1\u011f\51\0\1\u0135\15\0"+
    "\1\u0149\1\u0137\43\0\1\315\4\0\1\u014a\3\0\2\315"+
    "\1\0\1\315\10\0\41\u014b\10\0\1\u0138\15\0\11\5"+
    "\1\u014c\30\5\10\0\1\5\15\0\5\5\1\276\34\5"+
    "\10\0\1\5\26\0\1\u014d\57\0\41\u014e\10\0\1\u013c"+
    "\65\0\1\u013e\16\0\1\u014f\1\u0150\4\0\1\u0151\10\0"+
    "\1\u0152\15\0\1\u0153\3\0\1\u0154\14\0\1\u0155\5\0"+
    "\1\u0156\7\0\1\u0157\100\0\1\u0158\105\0\1\u0157\74\0"+
    "\1\u0141\37\0\1\u0159\103\0\1\u015a\101\0\1\u015b\73\0"+
    "\1\u015c\25\0\1\u015d\42\u0147\3\0\1\u015e\4\0\1\u0147"+
    "\1\0\1\u015f\13\0\11\5\1\u0160\30\5\10\0\1\5"+
    "\61\0\1\u0161\4\0\1\u0162\3\0\2\u0161\1\0\1\u0161"+
    "\7\0\1\377\50\0\1\315\3\0\1\375\1\0\1\376"+
    "\7\0\1\u0149\42\u014b\2\0\1\315\4\0\1\u014a\1\u014b"+
    "\2\0\2\315\1\0\1\315\7\0\30\5\1\u0122\11\5"+
    "\10\0\1\5\45\0\1\u0163\37\0\42\u014e\10\0\1\u014e"+
    "\10\0\1\u0164\4\0\1\u0150\4\0\1\u0151\10\0\1\u0152"+
    "\15\0\1\u0153\3\0\1\u0154\14\0\1\u0155\5\0\1\u0156"+
    "\4\0\1\u0150\31\0\1\u0165\20\0\1\u0166\4\0\1\u0167"+
    "\1\0\1\u0167\11\0\1\u0168\76\0\1\u0169\107\0\1\u016a"+
    "\72\0\1\u016b\31\0\1\u0150\66\0\60\u016c\14\0\1\u016d"+
    "\67\0\1\u016e\100\0\1\u016f\105\0\1\u016e\74\0\1\u015b"+
    "\41\0\1\u0170\1\0\1\u0171\10\0\1\u0172\20\0\1\u0173"+
    "\6\0\1\u0174\60\0\1\u0175\76\0\1\u0175\13\0\31\5"+
    "\1\u0176\10\5\10\0\1\5\14\0\1\315\67\0\1\315"+
    "\51\0\1\u0161\32\0\1\u0177\137\0\1\u0178\60\0\2\u0167"+
    "\11\0\1\u0179\54\0\1\u017a\21\0\1\u017b\103\0\1\u017c"+
    "\101\0\1\u017d\73\0\1\u017e\25\0\60\u016c\4\0\1\u017f"+
    "\57\0\1\u0157\13\0\1\u015d\45\0\1\u015e\6\0\1\u015f"+
    "\16\0\1\u0180\70\0\1\u0181\113\0\1\u0182\50\0\1\u0170"+
    "\123\0\1\u0181\76\0\1\u0181\20\0\1\u0183\10\0\1\u0184"+
    "\15\0\1\u0185\3\0\1\u0186\1\0\1\u011a\14\0\1\u0187"+
    "\10\0\12\5\1\u0188\27\5\10\0\1\5\22\0\1\u0189"+
    "\61\0\1\u018a\70\0\1\u0179\52\0\1\u0166\14\0\1\u0179"+
    "\72\0\1\u017f\100\0\1\u018b\105\0\1\u017f\74\0\1\u017d"+
    "\103\0\1\u0166\67\0\1\u016e\13\0\1\u0175\105\0\1\u0181"+
    "\56\0\1\u018c\76\0\1\u018d\107\0\1\u018e\72\0\1\u018f"+
    "\32\0\41\u0190\10\0\1\u0187\15\0\10\5\1\u0191\31\5"+
    "\10\0\1\5\14\0\1\u0112\153\0\1\u0192\7\0\1\u0193"+
    "\73\0\1\u0194\103\0\1\u0195\101\0\1\u0196\73\0\1\u0197"+
    "\25\0\1\u0198\42\u0190\3\0\1\u0199\4\0\1\u0190\1\0"+
    "\1\u019a\13\0\23\5\1\u019b\16\5\10\0\1\5\15\0"+
    "\1\u019c\4\0\1\u019d\10\0\1\u019e\15\0\1\u019f\3\0"+
    "\1\u01a0\14\0\1\u01a1\5\0\1\u01a2\57\0\1\u017f\17\0"+
    "\1\u01a3\100\0\1\u01a4\105\0\1\u01a3\74\0\1\u0196\41\0"+
    "\1\u01a5\1\0\1\u01a6\10\0\1\u01a7\20\0\1\u01a8\6\0"+
    "\1\u01a9\60\0\1\u011a\76\0\1\u011a\13\0\3\5\1\u01aa"+
    "\36\5\10\0\1\5\15\0\1\u019c\31\0\1\u01ab\25\0"+
    "\1\u01ac\1\0\1\u01ac\1\u01ad\10\0\1\u01ae\76\0\1\u01af"+
    "\107\0\1\u01b0\72\0\1\u01b1\31\0\1\u019c\66\0\60\u01b2"+
    "\10\0\1\u0198\45\0\1\u0199\6\0\1\u019a\16\0\1\u01b3"+
    "\70\0\1\u01b4\113\0\1\u01b5\50\0\1\u01a5\123\0\1\u01b4"+
    "\76\0\1\u01b4\13\0\4\5\1\174\35\5\10\0\1\5"+
    "\72\0\2\u01ac\11\0\1\u01b6\54\0\1\u01b7\61\0\1\u017f"+
    "\27\0\1\u01b8\103\0\1\u01b9\101\0\1\u01ba\73\0\1\u01bb"+
    "\25\0\60\u01b2\4\0\1\u01bc\57\0\1\u01a3\13\0\1\u011a"+
    "\105\0\1\u01b4\52\0\1\u01b6\62\0\1\u01ad\4\0\1\u01b6"+
    "\72\0\1\u01bc\100\0\1\u01bd\105\0\1\u01bc\74\0\1\u01ba"+
    "\113\0\1\u01ad\7\0\1\u01be\137\0\1\u01bc\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\36\1\5\0\50\1\6\0\1\1\2\0"+
    "\2\1\4\0\1\1\1\0\53\1\4\0\2\1\4\0"+
    "\1\1\6\0\1\11\27\1\1\0\14\1\7\0\1\1"+
    "\2\0\1\1\5\0\1\1\7\0\4\1\1\0\15\1"+
    "\1\11\11\1\7\0\1\1\2\0\3\1\2\0\16\1"+
    "\12\0\2\1\3\0\6\1\14\0\2\1\4\0\2\1"+
    "\14\0\2\1\3\0\1\1\12\0\1\1\10\0\1\1"+
    "\5\0\1\11\7\0\1\1\7\0\1\1\21\0\1\1"+
    "\10\0\1\1\11\0\1\1\16\0\1\1\24\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public String lexeme ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 13: break;
          case 2: 
            { /*ignore*/
            }
          case 14: break;
          case 3: 
            { lexeme=yytext(); return TYPE_INT;
            }
          case 15: break;
          case 4: 
            { lexeme=yytext(); return IDENTIFIERS;
            }
          case 16: break;
          case 5: 
            { lexeme=yytext(); return RESERVE_WORD;
            }
          case 17: break;
          case 6: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 18: break;
          case 7: 
            { lexeme=yytext(); return VARIABLES;
            }
          case 19: break;
          case 8: 
            { lexeme=yytext(); return TYPE_REAL;
            }
          case 20: break;
          case 9: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 21: break;
          case 10: 
            { lexeme=yytext(); return TYPE_STRING;
            }
          case 22: break;
          case 11: 
            { lexeme=yytext(); return TYPE_BOOL;
            }
          case 23: break;
          case 12: 
            { lexeme=yytext(); return CONSTANTS;
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
